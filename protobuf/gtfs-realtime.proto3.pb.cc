// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto3

#include "gtfs-realtime.proto3.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace MontrealSubwayRealtimeLocation {
PROTOBUF_CONSTEXPR FeedMessage::FeedMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entity_)*/{}
  , /*decltype(_impl_.header_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedMessageDefaultTypeInternal() {}
  union {
    FeedMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedMessageDefaultTypeInternal _FeedMessage_default_instance_;
PROTOBUF_CONSTEXPR FeedHeader::FeedHeader(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gtfs_realtime_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.incrementality_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedHeaderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedHeaderDefaultTypeInternal() {}
  union {
    FeedHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedHeaderDefaultTypeInternal _FeedHeader_default_instance_;
PROTOBUF_CONSTEXPR FeedEntity::FeedEntity(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trip_update_)*/nullptr
  , /*decltype(_impl_.vehicle_)*/nullptr
  , /*decltype(_impl_.alert_)*/nullptr
  , /*decltype(_impl_.is_deleted_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FeedEntityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FeedEntityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FeedEntityDefaultTypeInternal() {}
  union {
    FeedEntity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FeedEntityDefaultTypeInternal _FeedEntity_default_instance_;
PROTOBUF_CONSTEXPR TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/int64_t{0}
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_.uncertainty_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TripUpdate_StopTimeEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripUpdate_StopTimeEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripUpdate_StopTimeEventDefaultTypeInternal() {}
  union {
    TripUpdate_StopTimeEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripUpdate_StopTimeEventDefaultTypeInternal _TripUpdate_StopTimeEvent_default_instance_;
PROTOBUF_CONSTEXPR TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.arrival_)*/nullptr
  , /*decltype(_impl_.departure_)*/nullptr
  , /*decltype(_impl_.stop_sequence_)*/0u
  , /*decltype(_impl_.schedule_relationship_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TripUpdate_StopTimeUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripUpdate_StopTimeUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripUpdate_StopTimeUpdateDefaultTypeInternal() {}
  union {
    TripUpdate_StopTimeUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripUpdate_StopTimeUpdateDefaultTypeInternal _TripUpdate_StopTimeUpdate_default_instance_;
PROTOBUF_CONSTEXPR TripUpdate::TripUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_time_update_)*/{}
  , /*decltype(_impl_.trip_)*/nullptr
  , /*decltype(_impl_.vehicle_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TripUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripUpdateDefaultTypeInternal() {}
  union {
    TripUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripUpdateDefaultTypeInternal _TripUpdate_default_instance_;
PROTOBUF_CONSTEXPR VehiclePosition::VehiclePosition(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stop_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trip_)*/nullptr
  , /*decltype(_impl_.position_)*/nullptr
  , /*decltype(_impl_.vehicle_)*/nullptr
  , /*decltype(_impl_.current_stop_sequence_)*/0u
  , /*decltype(_impl_.current_status_)*/0
  , /*decltype(_impl_.timestamp_)*/uint64_t{0u}
  , /*decltype(_impl_.congestion_level_)*/0
  , /*decltype(_impl_.occupancy_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehiclePositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehiclePositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehiclePositionDefaultTypeInternal() {}
  union {
    VehiclePosition _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehiclePositionDefaultTypeInternal _VehiclePosition_default_instance_;
PROTOBUF_CONSTEXPR Alert::Alert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.active_period_)*/{}
  , /*decltype(_impl_.informed_entity_)*/{}
  , /*decltype(_impl_.url_)*/nullptr
  , /*decltype(_impl_.header_text_)*/nullptr
  , /*decltype(_impl_.description_text_)*/nullptr
  , /*decltype(_impl_.cause_)*/0
  , /*decltype(_impl_.effect_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlertDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlertDefaultTypeInternal() {}
  union {
    Alert _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlertDefaultTypeInternal _Alert_default_instance_;
PROTOBUF_CONSTEXPR TimeRange::TimeRange(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.start_)*/uint64_t{0u}
  , /*decltype(_impl_.end_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TimeRangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TimeRangeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TimeRangeDefaultTypeInternal() {}
  union {
    TimeRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
PROTOBUF_CONSTEXPR Position::Position(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latitude_)*/0
  , /*decltype(_impl_.longitude_)*/0
  , /*decltype(_impl_.odometer_)*/0
  , /*decltype(_impl_.bearing_)*/0
  , /*decltype(_impl_.speed_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PositionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PositionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PositionDefaultTypeInternal() {}
  union {
    Position _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PositionDefaultTypeInternal _Position_default_instance_;
PROTOBUF_CONSTEXPR TripDescriptor::TripDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trip_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_date_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.route_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.schedule_relationship_)*/0
  , /*decltype(_impl_.direction_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TripDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TripDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TripDescriptorDefaultTypeInternal() {}
  union {
    TripDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TripDescriptorDefaultTypeInternal _TripDescriptor_default_instance_;
PROTOBUF_CONSTEXPR VehicleDescriptor::VehicleDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.label_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.license_plate_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VehicleDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VehicleDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VehicleDescriptorDefaultTypeInternal() {}
  union {
    VehicleDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VehicleDescriptorDefaultTypeInternal _VehicleDescriptor_default_instance_;
PROTOBUF_CONSTEXPR EntitySelector::EntitySelector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.agency_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.route_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stop_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.trip_)*/nullptr
  , /*decltype(_impl_.route_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EntitySelectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntitySelectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntitySelectorDefaultTypeInternal() {}
  union {
    EntitySelector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntitySelectorDefaultTypeInternal _EntitySelector_default_instance_;
PROTOBUF_CONSTEXPR TranslatedString_Translation::TranslatedString_Translation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.language_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TranslatedString_TranslationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranslatedString_TranslationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranslatedString_TranslationDefaultTypeInternal() {}
  union {
    TranslatedString_Translation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranslatedString_TranslationDefaultTypeInternal _TranslatedString_Translation_default_instance_;
PROTOBUF_CONSTEXPR TranslatedString::TranslatedString(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.translation_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TranslatedStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TranslatedStringDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TranslatedStringDefaultTypeInternal() {}
  union {
    TranslatedString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TranslatedStringDefaultTypeInternal _TranslatedString_default_instance_;
}  // namespace MontrealSubwayRealtimeLocation
static ::_pb::Metadata file_level_metadata_gtfs_2drealtime_2eproto3[15];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_gtfs_2drealtime_2eproto3[8];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_gtfs_2drealtime_2eproto3 = nullptr;

const uint32_t TableStruct_gtfs_2drealtime_2eproto3::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedMessage, _impl_.header_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedMessage, _impl_.entity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedHeader, _impl_.gtfs_realtime_version_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedHeader, _impl_.incrementality_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedHeader, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedEntity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedEntity, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedEntity, _impl_.is_deleted_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedEntity, _impl_.trip_update_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedEntity, _impl_.vehicle_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::FeedEntity, _impl_.alert_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent, _impl_.delay_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent, _impl_.uncertainty_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate, _impl_.stop_sequence_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate, _impl_.stop_id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate, _impl_.arrival_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate, _impl_.departure_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate, _impl_.schedule_relationship_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate, _impl_.trip_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate, _impl_.vehicle_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate, _impl_.stop_time_update_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripUpdate, _impl_.delay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.trip_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.vehicle_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.position_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.current_stop_sequence_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.stop_id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.current_status_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.timestamp_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.congestion_level_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehiclePosition, _impl_.occupancy_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Alert, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Alert, _impl_.active_period_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Alert, _impl_.informed_entity_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Alert, _impl_.cause_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Alert, _impl_.effect_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Alert, _impl_.url_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Alert, _impl_.header_text_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Alert, _impl_.description_text_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TimeRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TimeRange, _impl_.start_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TimeRange, _impl_.end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Position, _impl_.latitude_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Position, _impl_.longitude_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Position, _impl_.bearing_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Position, _impl_.odometer_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::Position, _impl_.speed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripDescriptor, _impl_.trip_id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripDescriptor, _impl_.route_id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripDescriptor, _impl_.direction_id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripDescriptor, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripDescriptor, _impl_.start_date_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TripDescriptor, _impl_.schedule_relationship_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehicleDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehicleDescriptor, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehicleDescriptor, _impl_.label_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::VehicleDescriptor, _impl_.license_plate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::EntitySelector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::EntitySelector, _impl_.agency_id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::EntitySelector, _impl_.route_id_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::EntitySelector, _impl_.route_type_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::EntitySelector, _impl_.trip_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::EntitySelector, _impl_.stop_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TranslatedString_Translation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TranslatedString_Translation, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TranslatedString_Translation, _impl_.language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TranslatedString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MontrealSubwayRealtimeLocation::TranslatedString, _impl_.translation_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::FeedMessage)},
  { 8, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::FeedHeader)},
  { 17, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::FeedEntity)},
  { 28, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent)},
  { 37, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate)},
  { 48, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::TripUpdate)},
  { 59, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::VehiclePosition)},
  { 74, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::Alert)},
  { 87, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::TimeRange)},
  { 95, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::Position)},
  { 106, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::TripDescriptor)},
  { 118, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::VehicleDescriptor)},
  { 127, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::EntitySelector)},
  { 138, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::TranslatedString_Translation)},
  { 146, -1, -1, sizeof(::MontrealSubwayRealtimeLocation::TranslatedString)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::MontrealSubwayRealtimeLocation::_FeedMessage_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_FeedHeader_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_FeedEntity_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_TripUpdate_StopTimeEvent_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_TripUpdate_StopTimeUpdate_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_TripUpdate_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_VehiclePosition_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_Alert_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_TimeRange_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_Position_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_TripDescriptor_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_VehicleDescriptor_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_EntitySelector_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_TranslatedString_Translation_default_instance_._instance,
  &::MontrealSubwayRealtimeLocation::_TranslatedString_default_instance_._instance,
};

const char descriptor_table_protodef_gtfs_2drealtime_2eproto3[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024gtfs-realtime.proto3\022\036MontrealSubwayRe"
  "altimeLocation\"\205\001\n\013FeedMessage\022:\n\006header"
  "\030\001 \001(\0132*.MontrealSubwayRealtimeLocation."
  "FeedHeader\022:\n\006entity\030\002 \003(\0132*.MontrealSub"
  "wayRealtimeLocation.FeedEntity\"\307\001\n\nFeedH"
  "eader\022\035\n\025gtfs_realtime_version\030\001 \001(\t\022Q\n\016"
  "incrementality\030\002 \001(\01629.MontrealSubwayRea"
  "ltimeLocation.FeedHeader.Incrementality\022"
  "\021\n\ttimestamp\030\003 \001(\004\"4\n\016Incrementality\022\020\n\014"
  "FULL_DATASET\020\000\022\020\n\014DIFFERENTIAL\020\001\"\345\001\n\nFee"
  "dEntity\022\n\n\002id\030\001 \001(\t\022\022\n\nis_deleted\030\002 \001(\010\022"
  "\?\n\013trip_update\030\003 \001(\0132*.MontrealSubwayRea"
  "ltimeLocation.TripUpdate\022@\n\007vehicle\030\004 \001("
  "\0132/.MontrealSubwayRealtimeLocation.Vehic"
  "lePosition\0224\n\005alert\030\005 \001(\0132%.MontrealSubw"
  "ayRealtimeLocation.Alert\"\313\005\n\nTripUpdate\022"
  "<\n\004trip\030\001 \001(\0132..MontrealSubwayRealtimeLo"
  "cation.TripDescriptor\022B\n\007vehicle\030\003 \001(\01321"
  ".MontrealSubwayRealtimeLocation.VehicleD"
  "escriptor\022S\n\020stop_time_update\030\002 \003(\01329.Mo"
  "ntrealSubwayRealtimeLocation.TripUpdate."
  "StopTimeUpdate\022\021\n\ttimestamp\030\004 \001(\004\022\r\n\005del"
  "ay\030\005 \001(\005\032A\n\rStopTimeEvent\022\r\n\005delay\030\001 \001(\005"
  "\022\014\n\004time\030\002 \001(\003\022\023\n\013uncertainty\030\003 \001(\005\032\200\003\n\016"
  "StopTimeUpdate\022\025\n\rstop_sequence\030\001 \001(\r\022\017\n"
  "\007stop_id\030\004 \001(\t\022I\n\007arrival\030\002 \001(\01328.Montre"
  "alSubwayRealtimeLocation.TripUpdate.Stop"
  "TimeEvent\022K\n\tdeparture\030\003 \001(\01328.MontrealS"
  "ubwayRealtimeLocation.TripUpdate.StopTim"
  "eEvent\022m\n\025schedule_relationship\030\005 \001(\0162N."
  "MontrealSubwayRealtimeLocation.TripUpdat"
  "e.StopTimeUpdate.ScheduleRelationship\"\?\n"
  "\024ScheduleRelationship\022\r\n\tSCHEDULED\020\000\022\013\n\007"
  "SKIPPED\020\001\022\013\n\007NO_DATA\020\002\"\235\007\n\017VehiclePositi"
  "on\022<\n\004trip\030\001 \001(\0132..MontrealSubwayRealtim"
  "eLocation.TripDescriptor\022B\n\007vehicle\030\010 \001("
  "\01321.MontrealSubwayRealtimeLocation.Vehic"
  "leDescriptor\022:\n\010position\030\002 \001(\0132(.Montrea"
  "lSubwayRealtimeLocation.Position\022\035\n\025curr"
  "ent_stop_sequence\030\003 \001(\r\022\017\n\007stop_id\030\007 \001(\t"
  "\022Y\n\016current_status\030\004 \001(\0162A.MontrealSubwa"
  "yRealtimeLocation.VehiclePosition.Vehicl"
  "eStopStatus\022\021\n\ttimestamp\030\005 \001(\004\022Y\n\020conges"
  "tion_level\030\006 \001(\0162\?.MontrealSubwayRealtim"
  "eLocation.VehiclePosition.CongestionLeve"
  "l\022Y\n\020occupancy_status\030\t \001(\0162\?.MontrealSu"
  "bwayRealtimeLocation.VehiclePosition.Occ"
  "upancyStatus\"G\n\021VehicleStopStatus\022\017\n\013INC"
  "OMING_AT\020\000\022\016\n\nSTOPPED_AT\020\001\022\021\n\rIN_TRANSIT"
  "_TO\020\002\"}\n\017CongestionLevel\022\034\n\030UNKNOWN_CONG"
  "ESTION_LEVEL\020\000\022\024\n\020RUNNING_SMOOTHLY\020\001\022\017\n\013"
  "STOP_AND_GO\020\002\022\016\n\nCONGESTION\020\003\022\025\n\021SEVERE_"
  "CONGESTION\020\004\"\257\001\n\017OccupancyStatus\022\t\n\005EMPT"
  "Y\020\000\022\030\n\024MANY_SEATS_AVAILABLE\020\001\022\027\n\023FEW_SEA"
  "TS_AVAILABLE\020\002\022\026\n\022STANDING_ROOM_ONLY\020\003\022\036"
  "\n\032CRUSHED_STANDING_ROOM_ONLY\020\004\022\010\n\004FULL\020\005"
  "\022\034\n\030NOT_ACCEPTING_PASSENGERS\020\006\"\246\007\n\005Alert"
  "\022@\n\ractive_period\030\001 \003(\0132).MontrealSubway"
  "RealtimeLocation.TimeRange\022G\n\017informed_e"
  "ntity\030\005 \003(\0132..MontrealSubwayRealtimeLoca"
  "tion.EntitySelector\022:\n\005cause\030\006 \001(\0162+.Mon"
  "trealSubwayRealtimeLocation.Alert.Cause\022"
  "<\n\006effect\030\007 \001(\0162,.MontrealSubwayRealtime"
  "Location.Alert.Effect\022=\n\003url\030\010 \001(\01320.Mon"
  "trealSubwayRealtimeLocation.TranslatedSt"
  "ring\022E\n\013header_text\030\n \001(\01320.MontrealSubw"
  "ayRealtimeLocation.TranslatedString\022J\n\020d"
  "escription_text\030\013 \001(\01320.MontrealSubwayRe"
  "altimeLocation.TranslatedString\"\362\001\n\005Caus"
  "e\022\030\n\024PROTO3_DEFAULT_CAUSE\020\000\022\021\n\rUNKNOWN_C"
  "AUSE\020\001\022\017\n\013OTHER_CAUSE\020\002\022\025\n\021TECHNICAL_PRO"
  "BLEM\020\003\022\n\n\006STRIKE\020\004\022\021\n\rDEMONSTRATION\020\005\022\014\n"
  "\010ACCIDENT\020\006\022\013\n\007HOLIDAY\020\007\022\013\n\007WEATHER\020\010\022\017\n"
  "\013MAINTENANCE\020\t\022\020\n\014CONSTRUCTION\020\n\022\023\n\017POLI"
  "CE_ACTIVITY\020\013\022\025\n\021MEDICAL_EMERGENCY\020\014\"\320\001\n"
  "\006Effect\022\031\n\025PROTO3_DEFAULT_EFFECT\020\000\022\016\n\nNO"
  "_SERVICE\020\001\022\023\n\017REDUCED_SERVICE\020\002\022\026\n\022SIGNI"
  "FICANT_DELAYS\020\003\022\n\n\006DETOUR\020\004\022\026\n\022ADDITIONA"
  "L_SERVICE\020\005\022\024\n\020MODIFIED_SERVICE\020\006\022\020\n\014OTH"
  "ER_EFFECT\020\007\022\022\n\016UNKNOWN_EFFECT\020\010\022\016\n\nSTOP_"
  "MOVED\020\t\"\'\n\tTimeRange\022\r\n\005start\030\001 \001(\004\022\013\n\003e"
  "nd\030\002 \001(\004\"a\n\010Position\022\020\n\010latitude\030\001 \001(\002\022\021"
  "\n\tlongitude\030\002 \001(\002\022\017\n\007bearing\030\003 \001(\002\022\020\n\010od"
  "ometer\030\004 \001(\001\022\r\n\005speed\030\005 \001(\002\"\246\002\n\016TripDesc"
  "riptor\022\017\n\007trip_id\030\001 \001(\t\022\020\n\010route_id\030\005 \001("
  "\t\022\024\n\014direction_id\030\006 \001(\r\022\022\n\nstart_time\030\002 "
  "\001(\t\022\022\n\nstart_date\030\003 \001(\t\022b\n\025schedule_rela"
  "tionship\030\004 \001(\0162C.MontrealSubwayRealtimeL"
  "ocation.TripDescriptor.ScheduleRelations"
  "hip\"O\n\024ScheduleRelationship\022\r\n\tSCHEDULED"
  "\020\000\022\t\n\005ADDED\020\001\022\017\n\013UNSCHEDULED\020\002\022\014\n\010CANCEL"
  "ED\020\003\"E\n\021VehicleDescriptor\022\n\n\002id\030\001 \001(\t\022\r\n"
  "\005label\030\002 \001(\t\022\025\n\rlicense_plate\030\003 \001(\t\"\230\001\n\016"
  "EntitySelector\022\021\n\tagency_id\030\001 \001(\t\022\020\n\010rou"
  "te_id\030\002 \001(\t\022\022\n\nroute_type\030\003 \001(\005\022<\n\004trip\030"
  "\004 \001(\0132..MontrealSubwayRealtimeLocation.T"
  "ripDescriptor\022\017\n\007stop_id\030\005 \001(\t\"\224\001\n\020Trans"
  "latedString\022Q\n\013translation\030\001 \003(\0132<.Montr"
  "ealSubwayRealtimeLocation.TranslatedStri"
  "ng.Translation\032-\n\013Translation\022\014\n\004text\030\001 "
  "\001(\t\022\020\n\010language\030\002 \001(\tB\035\n\033com.google.tran"
  "sit.realtimeb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_gtfs_2drealtime_2eproto3_once;
const ::_pbi::DescriptorTable descriptor_table_gtfs_2drealtime_2eproto3 = {
    false, false, 4060, descriptor_table_protodef_gtfs_2drealtime_2eproto3,
    "gtfs-realtime.proto3",
    &descriptor_table_gtfs_2drealtime_2eproto3_once, nullptr, 0, 15,
    schemas, file_default_instances, TableStruct_gtfs_2drealtime_2eproto3::offsets,
    file_level_metadata_gtfs_2drealtime_2eproto3, file_level_enum_descriptors_gtfs_2drealtime_2eproto3,
    file_level_service_descriptors_gtfs_2drealtime_2eproto3,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_gtfs_2drealtime_2eproto3_getter() {
  return &descriptor_table_gtfs_2drealtime_2eproto3;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_gtfs_2drealtime_2eproto3(&descriptor_table_gtfs_2drealtime_2eproto3);
namespace MontrealSubwayRealtimeLocation {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FeedHeader_Incrementality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto3);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto3[0];
}
bool FeedHeader_Incrementality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FeedHeader_Incrementality FeedHeader::FULL_DATASET;
constexpr FeedHeader_Incrementality FeedHeader::DIFFERENTIAL;
constexpr FeedHeader_Incrementality FeedHeader::Incrementality_MIN;
constexpr FeedHeader_Incrementality FeedHeader::Incrementality_MAX;
constexpr int FeedHeader::Incrementality_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto3);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto3[1];
}
bool TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SCHEDULED;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::SKIPPED;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::NO_DATA;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MIN;
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::ScheduleRelationship_MAX;
constexpr int TripUpdate_StopTimeUpdate::ScheduleRelationship_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehiclePosition_VehicleStopStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto3);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto3[2];
}
bool VehiclePosition_VehicleStopStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::INCOMING_AT;
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::STOPPED_AT;
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::IN_TRANSIT_TO;
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MIN;
constexpr VehiclePosition_VehicleStopStatus VehiclePosition::VehicleStopStatus_MAX;
constexpr int VehiclePosition::VehicleStopStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehiclePosition_CongestionLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto3);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto3[3];
}
bool VehiclePosition_CongestionLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehiclePosition_CongestionLevel VehiclePosition::UNKNOWN_CONGESTION_LEVEL;
constexpr VehiclePosition_CongestionLevel VehiclePosition::RUNNING_SMOOTHLY;
constexpr VehiclePosition_CongestionLevel VehiclePosition::STOP_AND_GO;
constexpr VehiclePosition_CongestionLevel VehiclePosition::CONGESTION;
constexpr VehiclePosition_CongestionLevel VehiclePosition::SEVERE_CONGESTION;
constexpr VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MIN;
constexpr VehiclePosition_CongestionLevel VehiclePosition::CongestionLevel_MAX;
constexpr int VehiclePosition::CongestionLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VehiclePosition_OccupancyStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto3);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto3[4];
}
bool VehiclePosition_OccupancyStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr VehiclePosition_OccupancyStatus VehiclePosition::EMPTY;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::MANY_SEATS_AVAILABLE;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::FEW_SEATS_AVAILABLE;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::STANDING_ROOM_ONLY;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::CRUSHED_STANDING_ROOM_ONLY;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::FULL;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::NOT_ACCEPTING_PASSENGERS;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::OccupancyStatus_MIN;
constexpr VehiclePosition_OccupancyStatus VehiclePosition::OccupancyStatus_MAX;
constexpr int VehiclePosition::OccupancyStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alert_Cause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto3);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto3[5];
}
bool Alert_Cause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Alert_Cause Alert::PROTO3_DEFAULT_CAUSE;
constexpr Alert_Cause Alert::UNKNOWN_CAUSE;
constexpr Alert_Cause Alert::OTHER_CAUSE;
constexpr Alert_Cause Alert::TECHNICAL_PROBLEM;
constexpr Alert_Cause Alert::STRIKE;
constexpr Alert_Cause Alert::DEMONSTRATION;
constexpr Alert_Cause Alert::ACCIDENT;
constexpr Alert_Cause Alert::HOLIDAY;
constexpr Alert_Cause Alert::WEATHER;
constexpr Alert_Cause Alert::MAINTENANCE;
constexpr Alert_Cause Alert::CONSTRUCTION;
constexpr Alert_Cause Alert::POLICE_ACTIVITY;
constexpr Alert_Cause Alert::MEDICAL_EMERGENCY;
constexpr Alert_Cause Alert::Cause_MIN;
constexpr Alert_Cause Alert::Cause_MAX;
constexpr int Alert::Cause_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Alert_Effect_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto3);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto3[6];
}
bool Alert_Effect_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Alert_Effect Alert::PROTO3_DEFAULT_EFFECT;
constexpr Alert_Effect Alert::NO_SERVICE;
constexpr Alert_Effect Alert::REDUCED_SERVICE;
constexpr Alert_Effect Alert::SIGNIFICANT_DELAYS;
constexpr Alert_Effect Alert::DETOUR;
constexpr Alert_Effect Alert::ADDITIONAL_SERVICE;
constexpr Alert_Effect Alert::MODIFIED_SERVICE;
constexpr Alert_Effect Alert::OTHER_EFFECT;
constexpr Alert_Effect Alert::UNKNOWN_EFFECT;
constexpr Alert_Effect Alert::STOP_MOVED;
constexpr Alert_Effect Alert::Effect_MIN;
constexpr Alert_Effect Alert::Effect_MAX;
constexpr int Alert::Effect_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TripDescriptor_ScheduleRelationship_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_gtfs_2drealtime_2eproto3);
  return file_level_enum_descriptors_gtfs_2drealtime_2eproto3[7];
}
bool TripDescriptor_ScheduleRelationship_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::SCHEDULED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::ADDED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::UNSCHEDULED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::CANCELED;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MIN;
constexpr TripDescriptor_ScheduleRelationship TripDescriptor::ScheduleRelationship_MAX;
constexpr int TripDescriptor::ScheduleRelationship_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FeedMessage::_Internal {
 public:
  static const ::MontrealSubwayRealtimeLocation::FeedHeader& header(const FeedMessage* msg);
};

const ::MontrealSubwayRealtimeLocation::FeedHeader&
FeedMessage::_Internal::header(const FeedMessage* msg) {
  return *msg->_impl_.header_;
}
FeedMessage::FeedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.FeedMessage)
}
FeedMessage::FeedMessage(const FeedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_){from._impl_.entity_}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    _this->_impl_.header_ = new ::MontrealSubwayRealtimeLocation::FeedHeader(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.FeedMessage)
}

inline void FeedMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entity_){arena}
    , decltype(_impl_.header_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FeedMessage::~FeedMessage() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.FeedMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entity_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void FeedMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.FeedMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entity_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.header_ != nullptr) {
    delete _impl_.header_;
  }
  _impl_.header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MontrealSubwayRealtimeLocation.FeedHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .MontrealSubwayRealtimeLocation.FeedEntity entity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.FeedMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MontrealSubwayRealtimeLocation.FeedHeader header = 1;
  if (this->_internal_has_header()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // repeated .MontrealSubwayRealtimeLocation.FeedEntity entity = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entity_size()); i < n; i++) {
    const auto& repfield = this->_internal_entity(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.FeedMessage)
  return target;
}

size_t FeedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.FeedMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MontrealSubwayRealtimeLocation.FeedEntity entity = 2;
  total_size += 1UL * this->_internal_entity_size();
  for (const auto& msg : this->_impl_.entity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .MontrealSubwayRealtimeLocation.FeedHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedMessage::GetClassData() const { return &_class_data_; }


void FeedMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedMessage*>(&to_msg);
  auto& from = static_cast<const FeedMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.FeedMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entity_.MergeFrom(from._impl_.entity_);
  if (from._internal_has_header()) {
    _this->_internal_mutable_header()->::MontrealSubwayRealtimeLocation::FeedHeader::MergeFrom(
        from._internal_header());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedMessage::CopyFrom(const FeedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.FeedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedMessage::IsInitialized() const {
  return true;
}

void FeedMessage::InternalSwap(FeedMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entity_.InternalSwap(&other->_impl_.entity_);
  swap(_impl_.header_, other->_impl_.header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[0]);
}

// ===================================================================

class FeedHeader::_Internal {
 public:
};

FeedHeader::FeedHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.FeedHeader)
}
FeedHeader::FeedHeader(const FeedHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedHeader* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gtfs_realtime_version_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.incrementality_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.gtfs_realtime_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gtfs_realtime_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_gtfs_realtime_version().empty()) {
    _this->_impl_.gtfs_realtime_version_.Set(from._internal_gtfs_realtime_version(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.incrementality_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.incrementality_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.FeedHeader)
}

inline void FeedHeader::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gtfs_realtime_version_){}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.incrementality_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.gtfs_realtime_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.gtfs_realtime_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeedHeader::~FeedHeader() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.FeedHeader)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gtfs_realtime_version_.Destroy();
}

void FeedHeader::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.FeedHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gtfs_realtime_version_.ClearToEmpty();
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.incrementality_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.incrementality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedHeader::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string gtfs_realtime_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_gtfs_realtime_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.FeedHeader.gtfs_realtime_version"));
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.FeedHeader.Incrementality incrementality = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_incrementality(static_cast<::MontrealSubwayRealtimeLocation::FeedHeader_Incrementality>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.FeedHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string gtfs_realtime_version = 1;
  if (!this->_internal_gtfs_realtime_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_gtfs_realtime_version().data(), static_cast<int>(this->_internal_gtfs_realtime_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.FeedHeader.gtfs_realtime_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_gtfs_realtime_version(), target);
  }

  // .MontrealSubwayRealtimeLocation.FeedHeader.Incrementality incrementality = 2;
  if (this->_internal_incrementality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_incrementality(), target);
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.FeedHeader)
  return target;
}

size_t FeedHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.FeedHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string gtfs_realtime_version = 1;
  if (!this->_internal_gtfs_realtime_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_gtfs_realtime_version());
  }

  // uint64 timestamp = 3;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .MontrealSubwayRealtimeLocation.FeedHeader.Incrementality incrementality = 2;
  if (this->_internal_incrementality() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_incrementality());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedHeader::GetClassData() const { return &_class_data_; }


void FeedHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedHeader*>(&to_msg);
  auto& from = static_cast<const FeedHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.FeedHeader)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_gtfs_realtime_version().empty()) {
    _this->_internal_set_gtfs_realtime_version(from._internal_gtfs_realtime_version());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_incrementality() != 0) {
    _this->_internal_set_incrementality(from._internal_incrementality());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedHeader::CopyFrom(const FeedHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.FeedHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedHeader::IsInitialized() const {
  return true;
}

void FeedHeader::InternalSwap(FeedHeader* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.gtfs_realtime_version_, lhs_arena,
      &other->_impl_.gtfs_realtime_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedHeader, _impl_.incrementality_)
      + sizeof(FeedHeader::_impl_.incrementality_)
      - PROTOBUF_FIELD_OFFSET(FeedHeader, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedHeader::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[1]);
}

// ===================================================================

class FeedEntity::_Internal {
 public:
  static const ::MontrealSubwayRealtimeLocation::TripUpdate& trip_update(const FeedEntity* msg);
  static const ::MontrealSubwayRealtimeLocation::VehiclePosition& vehicle(const FeedEntity* msg);
  static const ::MontrealSubwayRealtimeLocation::Alert& alert(const FeedEntity* msg);
};

const ::MontrealSubwayRealtimeLocation::TripUpdate&
FeedEntity::_Internal::trip_update(const FeedEntity* msg) {
  return *msg->_impl_.trip_update_;
}
const ::MontrealSubwayRealtimeLocation::VehiclePosition&
FeedEntity::_Internal::vehicle(const FeedEntity* msg) {
  return *msg->_impl_.vehicle_;
}
const ::MontrealSubwayRealtimeLocation::Alert&
FeedEntity::_Internal::alert(const FeedEntity* msg) {
  return *msg->_impl_.alert_;
}
FeedEntity::FeedEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.FeedEntity)
}
FeedEntity::FeedEntity(const FeedEntity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FeedEntity* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.trip_update_){nullptr}
    , decltype(_impl_.vehicle_){nullptr}
    , decltype(_impl_.alert_){nullptr}
    , decltype(_impl_.is_deleted_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trip_update()) {
    _this->_impl_.trip_update_ = new ::MontrealSubwayRealtimeLocation::TripUpdate(*from._impl_.trip_update_);
  }
  if (from._internal_has_vehicle()) {
    _this->_impl_.vehicle_ = new ::MontrealSubwayRealtimeLocation::VehiclePosition(*from._impl_.vehicle_);
  }
  if (from._internal_has_alert()) {
    _this->_impl_.alert_ = new ::MontrealSubwayRealtimeLocation::Alert(*from._impl_.alert_);
  }
  _this->_impl_.is_deleted_ = from._impl_.is_deleted_;
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.FeedEntity)
}

inline void FeedEntity::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.trip_update_){nullptr}
    , decltype(_impl_.vehicle_){nullptr}
    , decltype(_impl_.alert_){nullptr}
    , decltype(_impl_.is_deleted_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FeedEntity::~FeedEntity() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.FeedEntity)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FeedEntity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trip_update_;
  if (this != internal_default_instance()) delete _impl_.vehicle_;
  if (this != internal_default_instance()) delete _impl_.alert_;
}

void FeedEntity::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FeedEntity::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.FeedEntity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trip_update_ != nullptr) {
    delete _impl_.trip_update_;
  }
  _impl_.trip_update_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vehicle_ != nullptr) {
    delete _impl_.vehicle_;
  }
  _impl_.vehicle_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.alert_ != nullptr) {
    delete _impl_.alert_;
  }
  _impl_.alert_ = nullptr;
  _impl_.is_deleted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FeedEntity::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.FeedEntity.id"));
        } else
          goto handle_unusual;
        continue;
      // bool is_deleted = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_deleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TripUpdate trip_update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip_update(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.VehiclePosition vehicle = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.Alert alert = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_alert(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FeedEntity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.FeedEntity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.FeedEntity.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // bool is_deleted = 2;
  if (this->_internal_is_deleted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_deleted(), target);
  }

  // .MontrealSubwayRealtimeLocation.TripUpdate trip_update = 3;
  if (this->_internal_has_trip_update()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::trip_update(this),
        _Internal::trip_update(this).GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.VehiclePosition vehicle = 4;
  if (this->_internal_has_vehicle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vehicle(this),
        _Internal::vehicle(this).GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.Alert alert = 5;
  if (this->_internal_has_alert()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::alert(this),
        _Internal::alert(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.FeedEntity)
  return target;
}

size_t FeedEntity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.FeedEntity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .MontrealSubwayRealtimeLocation.TripUpdate trip_update = 3;
  if (this->_internal_has_trip_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trip_update_);
  }

  // .MontrealSubwayRealtimeLocation.VehiclePosition vehicle = 4;
  if (this->_internal_has_vehicle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vehicle_);
  }

  // .MontrealSubwayRealtimeLocation.Alert alert = 5;
  if (this->_internal_has_alert()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.alert_);
  }

  // bool is_deleted = 2;
  if (this->_internal_is_deleted() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FeedEntity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FeedEntity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FeedEntity::GetClassData() const { return &_class_data_; }


void FeedEntity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FeedEntity*>(&to_msg);
  auto& from = static_cast<const FeedEntity&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.FeedEntity)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_trip_update()) {
    _this->_internal_mutable_trip_update()->::MontrealSubwayRealtimeLocation::TripUpdate::MergeFrom(
        from._internal_trip_update());
  }
  if (from._internal_has_vehicle()) {
    _this->_internal_mutable_vehicle()->::MontrealSubwayRealtimeLocation::VehiclePosition::MergeFrom(
        from._internal_vehicle());
  }
  if (from._internal_has_alert()) {
    _this->_internal_mutable_alert()->::MontrealSubwayRealtimeLocation::Alert::MergeFrom(
        from._internal_alert());
  }
  if (from._internal_is_deleted() != 0) {
    _this->_internal_set_is_deleted(from._internal_is_deleted());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FeedEntity::CopyFrom(const FeedEntity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.FeedEntity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FeedEntity::IsInitialized() const {
  return true;
}

void FeedEntity::InternalSwap(FeedEntity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FeedEntity, _impl_.is_deleted_)
      + sizeof(FeedEntity::_impl_.is_deleted_)
      - PROTOBUF_FIELD_OFFSET(FeedEntity, _impl_.trip_update_)>(
          reinterpret_cast<char*>(&_impl_.trip_update_),
          reinterpret_cast<char*>(&other->_impl_.trip_update_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FeedEntity::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[2]);
}

// ===================================================================

class TripUpdate_StopTimeEvent::_Internal {
 public:
};

TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
}
TripUpdate_StopTimeEvent::TripUpdate_StopTimeEvent(const TripUpdate_StopTimeEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TripUpdate_StopTimeEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.delay_){}
    , decltype(_impl_.uncertainty_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.time_, &from._impl_.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.uncertainty_) -
    reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.uncertainty_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
}

inline void TripUpdate_StopTimeEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){int64_t{0}}
    , decltype(_impl_.delay_){0}
    , decltype(_impl_.uncertainty_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TripUpdate_StopTimeEvent::~TripUpdate_StopTimeEvent() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TripUpdate_StopTimeEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TripUpdate_StopTimeEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TripUpdate_StopTimeEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.uncertainty_) -
      reinterpret_cast<char*>(&_impl_.time_)) + sizeof(_impl_.uncertainty_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripUpdate_StopTimeEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 delay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 uncertainty = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.uncertainty_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripUpdate_StopTimeEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 delay = 1;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_delay(), target);
  }

  // int64 time = 2;
  if (this->_internal_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // int32 uncertainty = 3;
  if (this->_internal_uncertainty() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_uncertainty(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
  return target;
}

size_t TripUpdate_StopTimeEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 time = 2;
  if (this->_internal_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_time());
  }

  // int32 delay = 1;
  if (this->_internal_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delay());
  }

  // int32 uncertainty = 3;
  if (this->_internal_uncertainty() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_uncertainty());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripUpdate_StopTimeEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TripUpdate_StopTimeEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripUpdate_StopTimeEvent::GetClassData() const { return &_class_data_; }


void TripUpdate_StopTimeEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TripUpdate_StopTimeEvent*>(&to_msg);
  auto& from = static_cast<const TripUpdate_StopTimeEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_time() != 0) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_delay() != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  if (from._internal_uncertainty() != 0) {
    _this->_internal_set_uncertainty(from._internal_uncertainty());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripUpdate_StopTimeEvent::CopyFrom(const TripUpdate_StopTimeEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeEvent::IsInitialized() const {
  return true;
}

void TripUpdate_StopTimeEvent::InternalSwap(TripUpdate_StopTimeEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripUpdate_StopTimeEvent, _impl_.uncertainty_)
      + sizeof(TripUpdate_StopTimeEvent::_impl_.uncertainty_)
      - PROTOBUF_FIELD_OFFSET(TripUpdate_StopTimeEvent, _impl_.time_)>(
          reinterpret_cast<char*>(&_impl_.time_),
          reinterpret_cast<char*>(&other->_impl_.time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TripUpdate_StopTimeEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[3]);
}

// ===================================================================

class TripUpdate_StopTimeUpdate::_Internal {
 public:
  static const ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent& arrival(const TripUpdate_StopTimeUpdate* msg);
  static const ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent& departure(const TripUpdate_StopTimeUpdate* msg);
};

const ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent&
TripUpdate_StopTimeUpdate::_Internal::arrival(const TripUpdate_StopTimeUpdate* msg) {
  return *msg->_impl_.arrival_;
}
const ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent&
TripUpdate_StopTimeUpdate::_Internal::departure(const TripUpdate_StopTimeUpdate* msg) {
  return *msg->_impl_.departure_;
}
TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
}
TripUpdate_StopTimeUpdate::TripUpdate_StopTimeUpdate(const TripUpdate_StopTimeUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TripUpdate_StopTimeUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_id_){}
    , decltype(_impl_.arrival_){nullptr}
    , decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.stop_sequence_){}
    , decltype(_impl_.schedule_relationship_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_id().empty()) {
    _this->_impl_.stop_id_.Set(from._internal_stop_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_arrival()) {
    _this->_impl_.arrival_ = new ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent(*from._impl_.arrival_);
  }
  if (from._internal_has_departure()) {
    _this->_impl_.departure_ = new ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent(*from._impl_.departure_);
  }
  ::memcpy(&_impl_.stop_sequence_, &from._impl_.stop_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.schedule_relationship_) -
    reinterpret_cast<char*>(&_impl_.stop_sequence_)) + sizeof(_impl_.schedule_relationship_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
}

inline void TripUpdate_StopTimeUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_id_){}
    , decltype(_impl_.arrival_){nullptr}
    , decltype(_impl_.departure_){nullptr}
    , decltype(_impl_.stop_sequence_){0u}
    , decltype(_impl_.schedule_relationship_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TripUpdate_StopTimeUpdate::~TripUpdate_StopTimeUpdate() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TripUpdate_StopTimeUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.arrival_;
  if (this != internal_default_instance()) delete _impl_.departure_;
}

void TripUpdate_StopTimeUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TripUpdate_StopTimeUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.arrival_ != nullptr) {
    delete _impl_.arrival_;
  }
  _impl_.arrival_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.departure_ != nullptr) {
    delete _impl_.departure_;
  }
  _impl_.departure_ = nullptr;
  ::memset(&_impl_.stop_sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.schedule_relationship_) -
      reinterpret_cast<char*>(&_impl_.stop_sequence_)) + sizeof(_impl_.schedule_relationship_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripUpdate_StopTimeUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 stop_sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.stop_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent arrival = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_arrival(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent departure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_departure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stop_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_stop_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate.stop_id"));
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_schedule_relationship(static_cast<::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate_ScheduleRelationship>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripUpdate_StopTimeUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 stop_sequence = 1;
  if (this->_internal_stop_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_stop_sequence(), target);
  }

  // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent arrival = 2;
  if (this->_internal_has_arrival()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::arrival(this),
        _Internal::arrival(this).GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent departure = 3;
  if (this->_internal_has_departure()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::departure(this),
        _Internal::departure(this).GetCachedSize(), target, stream);
  }

  // string stop_id = 4;
  if (!this->_internal_stop_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_id().data(), static_cast<int>(this->_internal_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate.stop_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_stop_id(), target);
  }

  // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
  if (this->_internal_schedule_relationship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_schedule_relationship(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
  return target;
}

size_t TripUpdate_StopTimeUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stop_id = 4;
  if (!this->_internal_stop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_id());
  }

  // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent arrival = 2;
  if (this->_internal_has_arrival()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.arrival_);
  }

  // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeEvent departure = 3;
  if (this->_internal_has_departure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.departure_);
  }

  // uint32 stop_sequence = 1;
  if (this->_internal_stop_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stop_sequence());
  }

  // .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
  if (this->_internal_schedule_relationship() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_schedule_relationship());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripUpdate_StopTimeUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TripUpdate_StopTimeUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripUpdate_StopTimeUpdate::GetClassData() const { return &_class_data_; }


void TripUpdate_StopTimeUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TripUpdate_StopTimeUpdate*>(&to_msg);
  auto& from = static_cast<const TripUpdate_StopTimeUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stop_id().empty()) {
    _this->_internal_set_stop_id(from._internal_stop_id());
  }
  if (from._internal_has_arrival()) {
    _this->_internal_mutable_arrival()->::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent::MergeFrom(
        from._internal_arrival());
  }
  if (from._internal_has_departure()) {
    _this->_internal_mutable_departure()->::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent::MergeFrom(
        from._internal_departure());
  }
  if (from._internal_stop_sequence() != 0) {
    _this->_internal_set_stop_sequence(from._internal_stop_sequence());
  }
  if (from._internal_schedule_relationship() != 0) {
    _this->_internal_set_schedule_relationship(from._internal_schedule_relationship());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripUpdate_StopTimeUpdate::CopyFrom(const TripUpdate_StopTimeUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate_StopTimeUpdate::IsInitialized() const {
  return true;
}

void TripUpdate_StopTimeUpdate::InternalSwap(TripUpdate_StopTimeUpdate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_id_, lhs_arena,
      &other->_impl_.stop_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripUpdate_StopTimeUpdate, _impl_.schedule_relationship_)
      + sizeof(TripUpdate_StopTimeUpdate::_impl_.schedule_relationship_)
      - PROTOBUF_FIELD_OFFSET(TripUpdate_StopTimeUpdate, _impl_.arrival_)>(
          reinterpret_cast<char*>(&_impl_.arrival_),
          reinterpret_cast<char*>(&other->_impl_.arrival_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TripUpdate_StopTimeUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[4]);
}

// ===================================================================

class TripUpdate::_Internal {
 public:
  static const ::MontrealSubwayRealtimeLocation::TripDescriptor& trip(const TripUpdate* msg);
  static const ::MontrealSubwayRealtimeLocation::VehicleDescriptor& vehicle(const TripUpdate* msg);
};

const ::MontrealSubwayRealtimeLocation::TripDescriptor&
TripUpdate::_Internal::trip(const TripUpdate* msg) {
  return *msg->_impl_.trip_;
}
const ::MontrealSubwayRealtimeLocation::VehicleDescriptor&
TripUpdate::_Internal::vehicle(const TripUpdate* msg) {
  return *msg->_impl_.vehicle_;
}
TripUpdate::TripUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.TripUpdate)
}
TripUpdate::TripUpdate(const TripUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TripUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_time_update_){from._impl_.stop_time_update_}
    , decltype(_impl_.trip_){nullptr}
    , decltype(_impl_.vehicle_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.delay_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trip()) {
    _this->_impl_.trip_ = new ::MontrealSubwayRealtimeLocation::TripDescriptor(*from._impl_.trip_);
  }
  if (from._internal_has_vehicle()) {
    _this->_impl_.vehicle_ = new ::MontrealSubwayRealtimeLocation::VehicleDescriptor(*from._impl_.vehicle_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delay_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.delay_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.TripUpdate)
}

inline void TripUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_time_update_){arena}
    , decltype(_impl_.trip_){nullptr}
    , decltype(_impl_.vehicle_){nullptr}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.delay_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TripUpdate::~TripUpdate() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.TripUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TripUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_time_update_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.trip_;
  if (this != internal_default_instance()) delete _impl_.vehicle_;
}

void TripUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TripUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.TripUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_time_update_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.trip_ != nullptr) {
    delete _impl_.trip_;
  }
  _impl_.trip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vehicle_ != nullptr) {
    delete _impl_.vehicle_;
  }
  _impl_.vehicle_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.delay_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.delay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate stop_time_update = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stop_time_update(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.VehicleDescriptor vehicle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 delay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.TripUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 1;
  if (this->_internal_has_trip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trip(this),
        _Internal::trip(this).GetCachedSize(), target, stream);
  }

  // repeated .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate stop_time_update = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stop_time_update_size()); i < n; i++) {
    const auto& repfield = this->_internal_stop_time_update(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.VehicleDescriptor vehicle = 3;
  if (this->_internal_has_vehicle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::vehicle(this),
        _Internal::vehicle(this).GetCachedSize(), target, stream);
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_timestamp(), target);
  }

  // int32 delay = 5;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.TripUpdate)
  return target;
}

size_t TripUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.TripUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MontrealSubwayRealtimeLocation.TripUpdate.StopTimeUpdate stop_time_update = 2;
  total_size += 1UL * this->_internal_stop_time_update_size();
  for (const auto& msg : this->_impl_.stop_time_update_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 1;
  if (this->_internal_has_trip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trip_);
  }

  // .MontrealSubwayRealtimeLocation.VehicleDescriptor vehicle = 3;
  if (this->_internal_has_vehicle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vehicle_);
  }

  // uint64 timestamp = 4;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // int32 delay = 5;
  if (this->_internal_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TripUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripUpdate::GetClassData() const { return &_class_data_; }


void TripUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TripUpdate*>(&to_msg);
  auto& from = static_cast<const TripUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.TripUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stop_time_update_.MergeFrom(from._impl_.stop_time_update_);
  if (from._internal_has_trip()) {
    _this->_internal_mutable_trip()->::MontrealSubwayRealtimeLocation::TripDescriptor::MergeFrom(
        from._internal_trip());
  }
  if (from._internal_has_vehicle()) {
    _this->_internal_mutable_vehicle()->::MontrealSubwayRealtimeLocation::VehicleDescriptor::MergeFrom(
        from._internal_vehicle());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_delay() != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripUpdate::CopyFrom(const TripUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.TripUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripUpdate::IsInitialized() const {
  return true;
}

void TripUpdate::InternalSwap(TripUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stop_time_update_.InternalSwap(&other->_impl_.stop_time_update_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripUpdate, _impl_.delay_)
      + sizeof(TripUpdate::_impl_.delay_)
      - PROTOBUF_FIELD_OFFSET(TripUpdate, _impl_.trip_)>(
          reinterpret_cast<char*>(&_impl_.trip_),
          reinterpret_cast<char*>(&other->_impl_.trip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TripUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[5]);
}

// ===================================================================

class VehiclePosition::_Internal {
 public:
  static const ::MontrealSubwayRealtimeLocation::TripDescriptor& trip(const VehiclePosition* msg);
  static const ::MontrealSubwayRealtimeLocation::VehicleDescriptor& vehicle(const VehiclePosition* msg);
  static const ::MontrealSubwayRealtimeLocation::Position& position(const VehiclePosition* msg);
};

const ::MontrealSubwayRealtimeLocation::TripDescriptor&
VehiclePosition::_Internal::trip(const VehiclePosition* msg) {
  return *msg->_impl_.trip_;
}
const ::MontrealSubwayRealtimeLocation::VehicleDescriptor&
VehiclePosition::_Internal::vehicle(const VehiclePosition* msg) {
  return *msg->_impl_.vehicle_;
}
const ::MontrealSubwayRealtimeLocation::Position&
VehiclePosition::_Internal::position(const VehiclePosition* msg) {
  return *msg->_impl_.position_;
}
VehiclePosition::VehiclePosition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.VehiclePosition)
}
VehiclePosition::VehiclePosition(const VehiclePosition& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehiclePosition* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_id_){}
    , decltype(_impl_.trip_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.vehicle_){nullptr}
    , decltype(_impl_.current_stop_sequence_){}
    , decltype(_impl_.current_status_){}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.congestion_level_){}
    , decltype(_impl_.occupancy_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.stop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_id().empty()) {
    _this->_impl_.stop_id_.Set(from._internal_stop_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trip()) {
    _this->_impl_.trip_ = new ::MontrealSubwayRealtimeLocation::TripDescriptor(*from._impl_.trip_);
  }
  if (from._internal_has_position()) {
    _this->_impl_.position_ = new ::MontrealSubwayRealtimeLocation::Position(*from._impl_.position_);
  }
  if (from._internal_has_vehicle()) {
    _this->_impl_.vehicle_ = new ::MontrealSubwayRealtimeLocation::VehicleDescriptor(*from._impl_.vehicle_);
  }
  ::memcpy(&_impl_.current_stop_sequence_, &from._impl_.current_stop_sequence_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.occupancy_status_) -
    reinterpret_cast<char*>(&_impl_.current_stop_sequence_)) + sizeof(_impl_.occupancy_status_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.VehiclePosition)
}

inline void VehiclePosition::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stop_id_){}
    , decltype(_impl_.trip_){nullptr}
    , decltype(_impl_.position_){nullptr}
    , decltype(_impl_.vehicle_){nullptr}
    , decltype(_impl_.current_stop_sequence_){0u}
    , decltype(_impl_.current_status_){0}
    , decltype(_impl_.timestamp_){uint64_t{0u}}
    , decltype(_impl_.congestion_level_){0}
    , decltype(_impl_.occupancy_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.stop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehiclePosition::~VehiclePosition() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.VehiclePosition)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehiclePosition::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stop_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trip_;
  if (this != internal_default_instance()) delete _impl_.position_;
  if (this != internal_default_instance()) delete _impl_.vehicle_;
}

void VehiclePosition::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehiclePosition::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.VehiclePosition)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stop_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trip_ != nullptr) {
    delete _impl_.trip_;
  }
  _impl_.trip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.position_ != nullptr) {
    delete _impl_.position_;
  }
  _impl_.position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.vehicle_ != nullptr) {
    delete _impl_.vehicle_;
  }
  _impl_.vehicle_ = nullptr;
  ::memset(&_impl_.current_stop_sequence_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.occupancy_status_) -
      reinterpret_cast<char*>(&_impl_.current_stop_sequence_)) + sizeof(_impl_.occupancy_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehiclePosition::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 current_stop_sequence = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.current_stop_sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.VehiclePosition.VehicleStopStatus current_status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_current_status(static_cast<::MontrealSubwayRealtimeLocation::VehiclePosition_VehicleStopStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.VehiclePosition.CongestionLevel congestion_level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_congestion_level(static_cast<::MontrealSubwayRealtimeLocation::VehiclePosition_CongestionLevel>(val));
        } else
          goto handle_unusual;
        continue;
      // string stop_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_stop_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.VehiclePosition.stop_id"));
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.VehicleDescriptor vehicle = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vehicle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.VehiclePosition.OccupancyStatus occupancy_status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_occupancy_status(static_cast<::MontrealSubwayRealtimeLocation::VehiclePosition_OccupancyStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehiclePosition::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.VehiclePosition)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 1;
  if (this->_internal_has_trip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::trip(this),
        _Internal::trip(this).GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.Position position = 2;
  if (this->_internal_has_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::position(this),
        _Internal::position(this).GetCachedSize(), target, stream);
  }

  // uint32 current_stop_sequence = 3;
  if (this->_internal_current_stop_sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_current_stop_sequence(), target);
  }

  // .MontrealSubwayRealtimeLocation.VehiclePosition.VehicleStopStatus current_status = 4;
  if (this->_internal_current_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_current_status(), target);
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_timestamp(), target);
  }

  // .MontrealSubwayRealtimeLocation.VehiclePosition.CongestionLevel congestion_level = 6;
  if (this->_internal_congestion_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_congestion_level(), target);
  }

  // string stop_id = 7;
  if (!this->_internal_stop_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_id().data(), static_cast<int>(this->_internal_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.VehiclePosition.stop_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_stop_id(), target);
  }

  // .MontrealSubwayRealtimeLocation.VehicleDescriptor vehicle = 8;
  if (this->_internal_has_vehicle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::vehicle(this),
        _Internal::vehicle(this).GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.VehiclePosition.OccupancyStatus occupancy_status = 9;
  if (this->_internal_occupancy_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_occupancy_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.VehiclePosition)
  return target;
}

size_t VehiclePosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.VehiclePosition)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stop_id = 7;
  if (!this->_internal_stop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_id());
  }

  // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 1;
  if (this->_internal_has_trip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trip_);
  }

  // .MontrealSubwayRealtimeLocation.Position position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.position_);
  }

  // .MontrealSubwayRealtimeLocation.VehicleDescriptor vehicle = 8;
  if (this->_internal_has_vehicle()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.vehicle_);
  }

  // uint32 current_stop_sequence = 3;
  if (this->_internal_current_stop_sequence() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_current_stop_sequence());
  }

  // .MontrealSubwayRealtimeLocation.VehiclePosition.VehicleStopStatus current_status = 4;
  if (this->_internal_current_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_current_status());
  }

  // uint64 timestamp = 5;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  // .MontrealSubwayRealtimeLocation.VehiclePosition.CongestionLevel congestion_level = 6;
  if (this->_internal_congestion_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_congestion_level());
  }

  // .MontrealSubwayRealtimeLocation.VehiclePosition.OccupancyStatus occupancy_status = 9;
  if (this->_internal_occupancy_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_occupancy_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehiclePosition::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehiclePosition::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehiclePosition::GetClassData() const { return &_class_data_; }


void VehiclePosition::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehiclePosition*>(&to_msg);
  auto& from = static_cast<const VehiclePosition&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.VehiclePosition)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stop_id().empty()) {
    _this->_internal_set_stop_id(from._internal_stop_id());
  }
  if (from._internal_has_trip()) {
    _this->_internal_mutable_trip()->::MontrealSubwayRealtimeLocation::TripDescriptor::MergeFrom(
        from._internal_trip());
  }
  if (from._internal_has_position()) {
    _this->_internal_mutable_position()->::MontrealSubwayRealtimeLocation::Position::MergeFrom(
        from._internal_position());
  }
  if (from._internal_has_vehicle()) {
    _this->_internal_mutable_vehicle()->::MontrealSubwayRealtimeLocation::VehicleDescriptor::MergeFrom(
        from._internal_vehicle());
  }
  if (from._internal_current_stop_sequence() != 0) {
    _this->_internal_set_current_stop_sequence(from._internal_current_stop_sequence());
  }
  if (from._internal_current_status() != 0) {
    _this->_internal_set_current_status(from._internal_current_status());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_congestion_level() != 0) {
    _this->_internal_set_congestion_level(from._internal_congestion_level());
  }
  if (from._internal_occupancy_status() != 0) {
    _this->_internal_set_occupancy_status(from._internal_occupancy_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehiclePosition::CopyFrom(const VehiclePosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.VehiclePosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehiclePosition::IsInitialized() const {
  return true;
}

void VehiclePosition::InternalSwap(VehiclePosition* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_id_, lhs_arena,
      &other->_impl_.stop_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VehiclePosition, _impl_.occupancy_status_)
      + sizeof(VehiclePosition::_impl_.occupancy_status_)
      - PROTOBUF_FIELD_OFFSET(VehiclePosition, _impl_.trip_)>(
          reinterpret_cast<char*>(&_impl_.trip_),
          reinterpret_cast<char*>(&other->_impl_.trip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VehiclePosition::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[6]);
}

// ===================================================================

class Alert::_Internal {
 public:
  static const ::MontrealSubwayRealtimeLocation::TranslatedString& url(const Alert* msg);
  static const ::MontrealSubwayRealtimeLocation::TranslatedString& header_text(const Alert* msg);
  static const ::MontrealSubwayRealtimeLocation::TranslatedString& description_text(const Alert* msg);
};

const ::MontrealSubwayRealtimeLocation::TranslatedString&
Alert::_Internal::url(const Alert* msg) {
  return *msg->_impl_.url_;
}
const ::MontrealSubwayRealtimeLocation::TranslatedString&
Alert::_Internal::header_text(const Alert* msg) {
  return *msg->_impl_.header_text_;
}
const ::MontrealSubwayRealtimeLocation::TranslatedString&
Alert::_Internal::description_text(const Alert* msg) {
  return *msg->_impl_.description_text_;
}
Alert::Alert(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.Alert)
}
Alert::Alert(const Alert& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Alert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.active_period_){from._impl_.active_period_}
    , decltype(_impl_.informed_entity_){from._impl_.informed_entity_}
    , decltype(_impl_.url_){nullptr}
    , decltype(_impl_.header_text_){nullptr}
    , decltype(_impl_.description_text_){nullptr}
    , decltype(_impl_.cause_){}
    , decltype(_impl_.effect_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_url()) {
    _this->_impl_.url_ = new ::MontrealSubwayRealtimeLocation::TranslatedString(*from._impl_.url_);
  }
  if (from._internal_has_header_text()) {
    _this->_impl_.header_text_ = new ::MontrealSubwayRealtimeLocation::TranslatedString(*from._impl_.header_text_);
  }
  if (from._internal_has_description_text()) {
    _this->_impl_.description_text_ = new ::MontrealSubwayRealtimeLocation::TranslatedString(*from._impl_.description_text_);
  }
  ::memcpy(&_impl_.cause_, &from._impl_.cause_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.effect_) -
    reinterpret_cast<char*>(&_impl_.cause_)) + sizeof(_impl_.effect_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.Alert)
}

inline void Alert::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.active_period_){arena}
    , decltype(_impl_.informed_entity_){arena}
    , decltype(_impl_.url_){nullptr}
    , decltype(_impl_.header_text_){nullptr}
    , decltype(_impl_.description_text_){nullptr}
    , decltype(_impl_.cause_){0}
    , decltype(_impl_.effect_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Alert::~Alert() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.Alert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Alert::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.active_period_.~RepeatedPtrField();
  _impl_.informed_entity_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.url_;
  if (this != internal_default_instance()) delete _impl_.header_text_;
  if (this != internal_default_instance()) delete _impl_.description_text_;
}

void Alert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Alert::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.Alert)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.active_period_.Clear();
  _impl_.informed_entity_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.url_ != nullptr) {
    delete _impl_.url_;
  }
  _impl_.url_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.header_text_ != nullptr) {
    delete _impl_.header_text_;
  }
  _impl_.header_text_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.description_text_ != nullptr) {
    delete _impl_.description_text_;
  }
  _impl_.description_text_ = nullptr;
  ::memset(&_impl_.cause_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.effect_) -
      reinterpret_cast<char*>(&_impl_.cause_)) + sizeof(_impl_.effect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MontrealSubwayRealtimeLocation.TimeRange active_period = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_active_period(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .MontrealSubwayRealtimeLocation.EntitySelector informed_entity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_informed_entity(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.Alert.Cause cause = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cause(static_cast<::MontrealSubwayRealtimeLocation::Alert_Cause>(val));
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.Alert.Effect effect = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_effect(static_cast<::MontrealSubwayRealtimeLocation::Alert_Effect>(val));
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TranslatedString url = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_url(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TranslatedString header_text = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_header_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TranslatedString description_text = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_description_text(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Alert::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.Alert)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MontrealSubwayRealtimeLocation.TimeRange active_period = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_active_period_size()); i < n; i++) {
    const auto& repfield = this->_internal_active_period(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .MontrealSubwayRealtimeLocation.EntitySelector informed_entity = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_informed_entity_size()); i < n; i++) {
    const auto& repfield = this->_internal_informed_entity(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.Alert.Cause cause = 6;
  if (this->_internal_cause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_cause(), target);
  }

  // .MontrealSubwayRealtimeLocation.Alert.Effect effect = 7;
  if (this->_internal_effect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_effect(), target);
  }

  // .MontrealSubwayRealtimeLocation.TranslatedString url = 8;
  if (this->_internal_has_url()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::url(this),
        _Internal::url(this).GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.TranslatedString header_text = 10;
  if (this->_internal_has_header_text()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::header_text(this),
        _Internal::header_text(this).GetCachedSize(), target, stream);
  }

  // .MontrealSubwayRealtimeLocation.TranslatedString description_text = 11;
  if (this->_internal_has_description_text()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::description_text(this),
        _Internal::description_text(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.Alert)
  return target;
}

size_t Alert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.Alert)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MontrealSubwayRealtimeLocation.TimeRange active_period = 1;
  total_size += 1UL * this->_internal_active_period_size();
  for (const auto& msg : this->_impl_.active_period_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MontrealSubwayRealtimeLocation.EntitySelector informed_entity = 5;
  total_size += 1UL * this->_internal_informed_entity_size();
  for (const auto& msg : this->_impl_.informed_entity_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .MontrealSubwayRealtimeLocation.TranslatedString url = 8;
  if (this->_internal_has_url()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.url_);
  }

  // .MontrealSubwayRealtimeLocation.TranslatedString header_text = 10;
  if (this->_internal_has_header_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_text_);
  }

  // .MontrealSubwayRealtimeLocation.TranslatedString description_text = 11;
  if (this->_internal_has_description_text()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.description_text_);
  }

  // .MontrealSubwayRealtimeLocation.Alert.Cause cause = 6;
  if (this->_internal_cause() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_cause());
  }

  // .MontrealSubwayRealtimeLocation.Alert.Effect effect = 7;
  if (this->_internal_effect() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_effect());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Alert::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Alert::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Alert::GetClassData() const { return &_class_data_; }


void Alert::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Alert*>(&to_msg);
  auto& from = static_cast<const Alert&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.Alert)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.active_period_.MergeFrom(from._impl_.active_period_);
  _this->_impl_.informed_entity_.MergeFrom(from._impl_.informed_entity_);
  if (from._internal_has_url()) {
    _this->_internal_mutable_url()->::MontrealSubwayRealtimeLocation::TranslatedString::MergeFrom(
        from._internal_url());
  }
  if (from._internal_has_header_text()) {
    _this->_internal_mutable_header_text()->::MontrealSubwayRealtimeLocation::TranslatedString::MergeFrom(
        from._internal_header_text());
  }
  if (from._internal_has_description_text()) {
    _this->_internal_mutable_description_text()->::MontrealSubwayRealtimeLocation::TranslatedString::MergeFrom(
        from._internal_description_text());
  }
  if (from._internal_cause() != 0) {
    _this->_internal_set_cause(from._internal_cause());
  }
  if (from._internal_effect() != 0) {
    _this->_internal_set_effect(from._internal_effect());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Alert::CopyFrom(const Alert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alert::IsInitialized() const {
  return true;
}

void Alert::InternalSwap(Alert* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.active_period_.InternalSwap(&other->_impl_.active_period_);
  _impl_.informed_entity_.InternalSwap(&other->_impl_.informed_entity_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Alert, _impl_.effect_)
      + sizeof(Alert::_impl_.effect_)
      - PROTOBUF_FIELD_OFFSET(Alert, _impl_.url_)>(
          reinterpret_cast<char*>(&_impl_.url_),
          reinterpret_cast<char*>(&other->_impl_.url_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Alert::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[7]);
}

// ===================================================================

class TimeRange::_Internal {
 public:
};

TimeRange::TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.TimeRange)
}
TimeRange::TimeRange(const TimeRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TimeRange* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){}
    , decltype(_impl_.end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.start_, &from._impl_.start_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.end_) -
    reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.TimeRange)
}

inline void TimeRange::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.start_){uint64_t{0u}}
    , decltype(_impl_.end_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TimeRange::~TimeRange() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.TimeRange)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TimeRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TimeRange::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TimeRange::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.TimeRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.end_) -
      reinterpret_cast<char*>(&_impl_.start_)) + sizeof(_impl_.end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TimeRange::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.start_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TimeRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.TimeRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start = 1;
  if (this->_internal_start() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start(), target);
  }

  // uint64 end = 2;
  if (this->_internal_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(2, this->_internal_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.TimeRange)
  return target;
}

size_t TimeRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.TimeRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 start = 1;
  if (this->_internal_start() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start());
  }

  // uint64 end = 2;
  if (this->_internal_end() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TimeRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TimeRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TimeRange::GetClassData() const { return &_class_data_; }


void TimeRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TimeRange*>(&to_msg);
  auto& from = static_cast<const TimeRange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.TimeRange)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_start() != 0) {
    _this->_internal_set_start(from._internal_start());
  }
  if (from._internal_end() != 0) {
    _this->_internal_set_end(from._internal_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TimeRange::CopyFrom(const TimeRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.TimeRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimeRange::IsInitialized() const {
  return true;
}

void TimeRange::InternalSwap(TimeRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TimeRange, _impl_.end_)
      + sizeof(TimeRange::_impl_.end_)
      - PROTOBUF_FIELD_OFFSET(TimeRange, _impl_.start_)>(
          reinterpret_cast<char*>(&_impl_.start_),
          reinterpret_cast<char*>(&other->_impl_.start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TimeRange::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[8]);
}

// ===================================================================

class Position::_Internal {
 public:
};

Position::Position(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.Position)
}
Position::Position(const Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Position* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){}
    , decltype(_impl_.longitude_){}
    , decltype(_impl_.odometer_){}
    , decltype(_impl_.bearing_){}
    , decltype(_impl_.speed_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.latitude_, &from._impl_.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.speed_) -
    reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.speed_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.Position)
}

inline void Position::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latitude_){0}
    , decltype(_impl_.longitude_){0}
    , decltype(_impl_.odometer_){0}
    , decltype(_impl_.bearing_){0}
    , decltype(_impl_.speed_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Position::~Position() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.Position)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Position::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Position::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Position::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.Position)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.speed_) -
      reinterpret_cast<char*>(&_impl_.latitude_)) + sizeof(_impl_.speed_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Position::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float bearing = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.bearing_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // double odometer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.odometer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // float speed = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Position::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.Position)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_latitude(), target);
  }

  // float longitude = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude(), target);
  }

  // float bearing = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bearing = this->_internal_bearing();
  uint32_t raw_bearing;
  memcpy(&raw_bearing, &tmp_bearing, sizeof(tmp_bearing));
  if (raw_bearing != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_bearing(), target);
  }

  // double odometer = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometer = this->_internal_odometer();
  uint64_t raw_odometer;
  memcpy(&raw_odometer, &tmp_odometer, sizeof(tmp_odometer));
  if (raw_odometer != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_odometer(), target);
  }

  // float speed = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_speed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.Position)
  return target;
}

size_t Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.Position)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float latitude = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = this->_internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 4;
  }

  // float longitude = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = this->_internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 4;
  }

  // double odometer = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometer = this->_internal_odometer();
  uint64_t raw_odometer;
  memcpy(&raw_odometer, &tmp_odometer, sizeof(tmp_odometer));
  if (raw_odometer != 0) {
    total_size += 1 + 8;
  }

  // float bearing = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bearing = this->_internal_bearing();
  uint32_t raw_bearing;
  memcpy(&raw_bearing, &tmp_bearing, sizeof(tmp_bearing));
  if (raw_bearing != 0) {
    total_size += 1 + 4;
  }

  // float speed = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = this->_internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Position::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Position::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Position::GetClassData() const { return &_class_data_; }


void Position::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Position*>(&to_msg);
  auto& from = static_cast<const Position&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.Position)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_latitude = from._internal_latitude();
  uint32_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _this->_internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_longitude = from._internal_longitude();
  uint32_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _this->_internal_set_longitude(from._internal_longitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_odometer = from._internal_odometer();
  uint64_t raw_odometer;
  memcpy(&raw_odometer, &tmp_odometer, sizeof(tmp_odometer));
  if (raw_odometer != 0) {
    _this->_internal_set_odometer(from._internal_odometer());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_bearing = from._internal_bearing();
  uint32_t raw_bearing;
  memcpy(&raw_bearing, &tmp_bearing, sizeof(tmp_bearing));
  if (raw_bearing != 0) {
    _this->_internal_set_bearing(from._internal_bearing());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_speed = from._internal_speed();
  uint32_t raw_speed;
  memcpy(&raw_speed, &tmp_speed, sizeof(tmp_speed));
  if (raw_speed != 0) {
    _this->_internal_set_speed(from._internal_speed());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Position::CopyFrom(const Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Position::IsInitialized() const {
  return true;
}

void Position::InternalSwap(Position* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Position, _impl_.speed_)
      + sizeof(Position::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(Position, _impl_.latitude_)>(
          reinterpret_cast<char*>(&_impl_.latitude_),
          reinterpret_cast<char*>(&other->_impl_.latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Position::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[9]);
}

// ===================================================================

class TripDescriptor::_Internal {
 public:
};

TripDescriptor::TripDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.TripDescriptor)
}
TripDescriptor::TripDescriptor(const TripDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TripDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trip_id_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.start_date_){}
    , decltype(_impl_.route_id_){}
    , decltype(_impl_.schedule_relationship_){}
    , decltype(_impl_.direction_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trip_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trip_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trip_id().empty()) {
    _this->_impl_.trip_id_.Set(from._internal_trip_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.start_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_time().empty()) {
    _this->_impl_.start_time_.Set(from._internal_start_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.start_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_date().empty()) {
    _this->_impl_.start_date_.Set(from._internal_start_date(), 
      _this->GetArenaForAllocation());
  }
  _impl_.route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_id().empty()) {
    _this->_impl_.route_id_.Set(from._internal_route_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.schedule_relationship_, &from._impl_.schedule_relationship_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.direction_id_) -
    reinterpret_cast<char*>(&_impl_.schedule_relationship_)) + sizeof(_impl_.direction_id_));
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.TripDescriptor)
}

inline void TripDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trip_id_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.start_date_){}
    , decltype(_impl_.route_id_){}
    , decltype(_impl_.schedule_relationship_){0}
    , decltype(_impl_.direction_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trip_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trip_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_date_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_date_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TripDescriptor::~TripDescriptor() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.TripDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TripDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trip_id_.Destroy();
  _impl_.start_time_.Destroy();
  _impl_.start_date_.Destroy();
  _impl_.route_id_.Destroy();
}

void TripDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TripDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.TripDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trip_id_.ClearToEmpty();
  _impl_.start_time_.ClearToEmpty();
  _impl_.start_date_.ClearToEmpty();
  _impl_.route_id_.ClearToEmpty();
  ::memset(&_impl_.schedule_relationship_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.direction_id_) -
      reinterpret_cast<char*>(&_impl_.schedule_relationship_)) + sizeof(_impl_.direction_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TripDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trip_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trip_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.TripDescriptor.trip_id"));
        } else
          goto handle_unusual;
        continue;
      // string start_time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_start_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.TripDescriptor.start_time"));
        } else
          goto handle_unusual;
        continue;
      // string start_date = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_start_date();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.TripDescriptor.start_date"));
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_schedule_relationship(static_cast<::MontrealSubwayRealtimeLocation::TripDescriptor_ScheduleRelationship>(val));
        } else
          goto handle_unusual;
        continue;
      // string route_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_route_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.TripDescriptor.route_id"));
        } else
          goto handle_unusual;
        continue;
      // uint32 direction_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.direction_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TripDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.TripDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trip_id = 1;
  if (!this->_internal_trip_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trip_id().data(), static_cast<int>(this->_internal_trip_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.TripDescriptor.trip_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trip_id(), target);
  }

  // string start_time = 2;
  if (!this->_internal_start_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.TripDescriptor.start_time");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_start_time(), target);
  }

  // string start_date = 3;
  if (!this->_internal_start_date().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_date().data(), static_cast<int>(this->_internal_start_date().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.TripDescriptor.start_date");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_start_date(), target);
  }

  // .MontrealSubwayRealtimeLocation.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (this->_internal_schedule_relationship() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_schedule_relationship(), target);
  }

  // string route_id = 5;
  if (!this->_internal_route_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.TripDescriptor.route_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_route_id(), target);
  }

  // uint32 direction_id = 6;
  if (this->_internal_direction_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(6, this->_internal_direction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.TripDescriptor)
  return target;
}

size_t TripDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.TripDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trip_id = 1;
  if (!this->_internal_trip_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trip_id());
  }

  // string start_time = 2;
  if (!this->_internal_start_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_time());
  }

  // string start_date = 3;
  if (!this->_internal_start_date().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_date());
  }

  // string route_id = 5;
  if (!this->_internal_route_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_id());
  }

  // .MontrealSubwayRealtimeLocation.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  if (this->_internal_schedule_relationship() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_schedule_relationship());
  }

  // uint32 direction_id = 6;
  if (this->_internal_direction_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_direction_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TripDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TripDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TripDescriptor::GetClassData() const { return &_class_data_; }


void TripDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TripDescriptor*>(&to_msg);
  auto& from = static_cast<const TripDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.TripDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trip_id().empty()) {
    _this->_internal_set_trip_id(from._internal_trip_id());
  }
  if (!from._internal_start_time().empty()) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (!from._internal_start_date().empty()) {
    _this->_internal_set_start_date(from._internal_start_date());
  }
  if (!from._internal_route_id().empty()) {
    _this->_internal_set_route_id(from._internal_route_id());
  }
  if (from._internal_schedule_relationship() != 0) {
    _this->_internal_set_schedule_relationship(from._internal_schedule_relationship());
  }
  if (from._internal_direction_id() != 0) {
    _this->_internal_set_direction_id(from._internal_direction_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TripDescriptor::CopyFrom(const TripDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.TripDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripDescriptor::IsInitialized() const {
  return true;
}

void TripDescriptor::InternalSwap(TripDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trip_id_, lhs_arena,
      &other->_impl_.trip_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_time_, lhs_arena,
      &other->_impl_.start_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_date_, lhs_arena,
      &other->_impl_.start_date_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_id_, lhs_arena,
      &other->_impl_.route_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TripDescriptor, _impl_.direction_id_)
      + sizeof(TripDescriptor::_impl_.direction_id_)
      - PROTOBUF_FIELD_OFFSET(TripDescriptor, _impl_.schedule_relationship_)>(
          reinterpret_cast<char*>(&_impl_.schedule_relationship_),
          reinterpret_cast<char*>(&other->_impl_.schedule_relationship_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TripDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[10]);
}

// ===================================================================

class VehicleDescriptor::_Internal {
 public:
};

VehicleDescriptor::VehicleDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.VehicleDescriptor)
}
VehicleDescriptor::VehicleDescriptor(const VehicleDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VehicleDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.license_plate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    _this->_impl_.label_.Set(from._internal_label(), 
      _this->GetArenaForAllocation());
  }
  _impl_.license_plate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_plate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_license_plate().empty()) {
    _this->_impl_.license_plate_.Set(from._internal_license_plate(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.VehicleDescriptor)
}

inline void VehicleDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.label_){}
    , decltype(_impl_.license_plate_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.license_plate_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.license_plate_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VehicleDescriptor::~VehicleDescriptor() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.VehicleDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VehicleDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  _impl_.label_.Destroy();
  _impl_.license_plate_.Destroy();
}

void VehicleDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VehicleDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.VehicleDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _impl_.label_.ClearToEmpty();
  _impl_.license_plate_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VehicleDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.VehicleDescriptor.id"));
        } else
          goto handle_unusual;
        continue;
      // string label = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.VehicleDescriptor.label"));
        } else
          goto handle_unusual;
        continue;
      // string license_plate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_license_plate();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.VehicleDescriptor.license_plate"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VehicleDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.VehicleDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.VehicleDescriptor.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.VehicleDescriptor.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // string license_plate = 3;
  if (!this->_internal_license_plate().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_license_plate().data(), static_cast<int>(this->_internal_license_plate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.VehicleDescriptor.license_plate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_license_plate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.VehicleDescriptor)
  return target;
}

size_t VehicleDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.VehicleDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string label = 2;
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string license_plate = 3;
  if (!this->_internal_license_plate().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_license_plate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VehicleDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VehicleDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VehicleDescriptor::GetClassData() const { return &_class_data_; }


void VehicleDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VehicleDescriptor*>(&to_msg);
  auto& from = static_cast<const VehicleDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.VehicleDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_label().empty()) {
    _this->_internal_set_label(from._internal_label());
  }
  if (!from._internal_license_plate().empty()) {
    _this->_internal_set_license_plate(from._internal_license_plate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VehicleDescriptor::CopyFrom(const VehicleDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.VehicleDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleDescriptor::IsInitialized() const {
  return true;
}

void VehicleDescriptor::InternalSwap(VehicleDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.label_, lhs_arena,
      &other->_impl_.label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.license_plate_, lhs_arena,
      &other->_impl_.license_plate_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata VehicleDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[11]);
}

// ===================================================================

class EntitySelector::_Internal {
 public:
  static const ::MontrealSubwayRealtimeLocation::TripDescriptor& trip(const EntitySelector* msg);
};

const ::MontrealSubwayRealtimeLocation::TripDescriptor&
EntitySelector::_Internal::trip(const EntitySelector* msg) {
  return *msg->_impl_.trip_;
}
EntitySelector::EntitySelector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.EntitySelector)
}
EntitySelector::EntitySelector(const EntitySelector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntitySelector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.agency_id_){}
    , decltype(_impl_.route_id_){}
    , decltype(_impl_.stop_id_){}
    , decltype(_impl_.trip_){nullptr}
    , decltype(_impl_.route_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.agency_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agency_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agency_id().empty()) {
    _this->_impl_.agency_id_.Set(from._internal_agency_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_route_id().empty()) {
    _this->_impl_.route_id_.Set(from._internal_route_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.stop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stop_id().empty()) {
    _this->_impl_.stop_id_.Set(from._internal_stop_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_trip()) {
    _this->_impl_.trip_ = new ::MontrealSubwayRealtimeLocation::TripDescriptor(*from._impl_.trip_);
  }
  _this->_impl_.route_type_ = from._impl_.route_type_;
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.EntitySelector)
}

inline void EntitySelector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.agency_id_){}
    , decltype(_impl_.route_id_){}
    , decltype(_impl_.stop_id_){}
    , decltype(_impl_.trip_){nullptr}
    , decltype(_impl_.route_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.agency_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.agency_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.route_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.route_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.stop_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.stop_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EntitySelector::~EntitySelector() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.EntitySelector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntitySelector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.agency_id_.Destroy();
  _impl_.route_id_.Destroy();
  _impl_.stop_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.trip_;
}

void EntitySelector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntitySelector::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.EntitySelector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.agency_id_.ClearToEmpty();
  _impl_.route_id_.ClearToEmpty();
  _impl_.stop_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.trip_ != nullptr) {
    delete _impl_.trip_;
  }
  _impl_.trip_ = nullptr;
  _impl_.route_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntitySelector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agency_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agency_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.EntitySelector.agency_id"));
        } else
          goto handle_unusual;
        continue;
      // string route_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_route_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.EntitySelector.route_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 route_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.route_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_trip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string stop_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_stop_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.EntitySelector.stop_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntitySelector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.EntitySelector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agency_id = 1;
  if (!this->_internal_agency_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agency_id().data(), static_cast<int>(this->_internal_agency_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.EntitySelector.agency_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agency_id(), target);
  }

  // string route_id = 2;
  if (!this->_internal_route_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_route_id().data(), static_cast<int>(this->_internal_route_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.EntitySelector.route_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_route_id(), target);
  }

  // int32 route_type = 3;
  if (this->_internal_route_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_route_type(), target);
  }

  // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 4;
  if (this->_internal_has_trip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::trip(this),
        _Internal::trip(this).GetCachedSize(), target, stream);
  }

  // string stop_id = 5;
  if (!this->_internal_stop_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stop_id().data(), static_cast<int>(this->_internal_stop_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.EntitySelector.stop_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_stop_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.EntitySelector)
  return target;
}

size_t EntitySelector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.EntitySelector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agency_id = 1;
  if (!this->_internal_agency_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agency_id());
  }

  // string route_id = 2;
  if (!this->_internal_route_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_route_id());
  }

  // string stop_id = 5;
  if (!this->_internal_stop_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stop_id());
  }

  // .MontrealSubwayRealtimeLocation.TripDescriptor trip = 4;
  if (this->_internal_has_trip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.trip_);
  }

  // int32 route_type = 3;
  if (this->_internal_route_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_route_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntitySelector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntitySelector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntitySelector::GetClassData() const { return &_class_data_; }


void EntitySelector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntitySelector*>(&to_msg);
  auto& from = static_cast<const EntitySelector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.EntitySelector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agency_id().empty()) {
    _this->_internal_set_agency_id(from._internal_agency_id());
  }
  if (!from._internal_route_id().empty()) {
    _this->_internal_set_route_id(from._internal_route_id());
  }
  if (!from._internal_stop_id().empty()) {
    _this->_internal_set_stop_id(from._internal_stop_id());
  }
  if (from._internal_has_trip()) {
    _this->_internal_mutable_trip()->::MontrealSubwayRealtimeLocation::TripDescriptor::MergeFrom(
        from._internal_trip());
  }
  if (from._internal_route_type() != 0) {
    _this->_internal_set_route_type(from._internal_route_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntitySelector::CopyFrom(const EntitySelector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.EntitySelector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntitySelector::IsInitialized() const {
  return true;
}

void EntitySelector::InternalSwap(EntitySelector* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.agency_id_, lhs_arena,
      &other->_impl_.agency_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.route_id_, lhs_arena,
      &other->_impl_.route_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.stop_id_, lhs_arena,
      &other->_impl_.stop_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EntitySelector, _impl_.route_type_)
      + sizeof(EntitySelector::_impl_.route_type_)
      - PROTOBUF_FIELD_OFFSET(EntitySelector, _impl_.trip_)>(
          reinterpret_cast<char*>(&_impl_.trip_),
          reinterpret_cast<char*>(&other->_impl_.trip_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EntitySelector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[12]);
}

// ===================================================================

class TranslatedString_Translation::_Internal {
 public:
};

TranslatedString_Translation::TranslatedString_Translation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
}
TranslatedString_Translation::TranslatedString_Translation(const TranslatedString_Translation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TranslatedString_Translation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_language().empty()) {
    _this->_impl_.language_.Set(from._internal_language(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
}

inline void TranslatedString_Translation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.text_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.language_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.language_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TranslatedString_Translation::~TranslatedString_Translation() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TranslatedString_Translation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.text_.Destroy();
  _impl_.language_.Destroy();
}

void TranslatedString_Translation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TranslatedString_Translation::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.text_.ClearToEmpty();
  _impl_.language_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranslatedString_Translation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string text = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.TranslatedString.Translation.text"));
        } else
          goto handle_unusual;
        continue;
      // string language = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_language();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "MontrealSubwayRealtimeLocation.TranslatedString.Translation.language"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranslatedString_Translation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.TranslatedString.Translation.text");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_text(), target);
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_language().data(), static_cast<int>(this->_internal_language().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "MontrealSubwayRealtimeLocation.TranslatedString.Translation.language");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
  return target;
}

size_t TranslatedString_Translation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string text = 1;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string language = 2;
  if (!this->_internal_language().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranslatedString_Translation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TranslatedString_Translation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranslatedString_Translation::GetClassData() const { return &_class_data_; }


void TranslatedString_Translation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TranslatedString_Translation*>(&to_msg);
  auto& from = static_cast<const TranslatedString_Translation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (!from._internal_language().empty()) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranslatedString_Translation::CopyFrom(const TranslatedString_Translation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.TranslatedString.Translation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString_Translation::IsInitialized() const {
  return true;
}

void TranslatedString_Translation::InternalSwap(TranslatedString_Translation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.language_, lhs_arena,
      &other->_impl_.language_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TranslatedString_Translation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[13]);
}

// ===================================================================

class TranslatedString::_Internal {
 public:
};

TranslatedString::TranslatedString(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:MontrealSubwayRealtimeLocation.TranslatedString)
}
TranslatedString::TranslatedString(const TranslatedString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TranslatedString* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){from._impl_.translation_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:MontrealSubwayRealtimeLocation.TranslatedString)
}

inline void TranslatedString::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.translation_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TranslatedString::~TranslatedString() {
  // @@protoc_insertion_point(destructor:MontrealSubwayRealtimeLocation.TranslatedString)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TranslatedString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.translation_.~RepeatedPtrField();
}

void TranslatedString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TranslatedString::Clear() {
// @@protoc_insertion_point(message_clear_start:MontrealSubwayRealtimeLocation.TranslatedString)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.translation_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TranslatedString::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MontrealSubwayRealtimeLocation.TranslatedString.Translation translation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_translation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TranslatedString::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MontrealSubwayRealtimeLocation.TranslatedString)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MontrealSubwayRealtimeLocation.TranslatedString.Translation translation = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_translation_size()); i < n; i++) {
    const auto& repfield = this->_internal_translation(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MontrealSubwayRealtimeLocation.TranslatedString)
  return target;
}

size_t TranslatedString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MontrealSubwayRealtimeLocation.TranslatedString)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MontrealSubwayRealtimeLocation.TranslatedString.Translation translation = 1;
  total_size += 1UL * this->_internal_translation_size();
  for (const auto& msg : this->_impl_.translation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TranslatedString::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TranslatedString::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TranslatedString::GetClassData() const { return &_class_data_; }


void TranslatedString::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TranslatedString*>(&to_msg);
  auto& from = static_cast<const TranslatedString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MontrealSubwayRealtimeLocation.TranslatedString)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.translation_.MergeFrom(from._impl_.translation_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TranslatedString::CopyFrom(const TranslatedString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MontrealSubwayRealtimeLocation.TranslatedString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TranslatedString::IsInitialized() const {
  return true;
}

void TranslatedString::InternalSwap(TranslatedString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.translation_.InternalSwap(&other->_impl_.translation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TranslatedString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_gtfs_2drealtime_2eproto3_getter, &descriptor_table_gtfs_2drealtime_2eproto3_once,
      file_level_metadata_gtfs_2drealtime_2eproto3[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace MontrealSubwayRealtimeLocation
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::FeedMessage*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::FeedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::FeedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::FeedHeader*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::FeedHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::FeedHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::FeedEntity*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::FeedEntity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::FeedEntity >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::TripUpdate_StopTimeUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::TripUpdate*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::TripUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::TripUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::VehiclePosition*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::VehiclePosition >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::VehiclePosition >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::Alert*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::Alert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::Alert >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::TimeRange*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::TimeRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::TimeRange >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::Position*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::Position >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::Position >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::TripDescriptor*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::TripDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::TripDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::VehicleDescriptor*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::VehicleDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::VehicleDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::EntitySelector*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::EntitySelector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::EntitySelector >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::TranslatedString_Translation*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::TranslatedString_Translation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::TranslatedString_Translation >(arena);
}
template<> PROTOBUF_NOINLINE ::MontrealSubwayRealtimeLocation::TranslatedString*
Arena::CreateMaybeMessage< ::MontrealSubwayRealtimeLocation::TranslatedString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MontrealSubwayRealtimeLocation::TranslatedString >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
