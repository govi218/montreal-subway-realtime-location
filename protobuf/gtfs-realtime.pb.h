// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gtfs-realtime.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_gtfs_2drealtime_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_gtfs_2drealtime_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_gtfs_2drealtime_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_gtfs_2drealtime_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_gtfs_2drealtime_2eproto;
namespace transit_realtime {
class Alert;
struct AlertDefaultTypeInternal;
extern AlertDefaultTypeInternal _Alert_default_instance_;
class EntitySelector;
struct EntitySelectorDefaultTypeInternal;
extern EntitySelectorDefaultTypeInternal _EntitySelector_default_instance_;
class FeedEntity;
struct FeedEntityDefaultTypeInternal;
extern FeedEntityDefaultTypeInternal _FeedEntity_default_instance_;
class FeedHeader;
struct FeedHeaderDefaultTypeInternal;
extern FeedHeaderDefaultTypeInternal _FeedHeader_default_instance_;
class FeedMessage;
struct FeedMessageDefaultTypeInternal;
extern FeedMessageDefaultTypeInternal _FeedMessage_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class TimeRange;
struct TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
class TranslatedString;
struct TranslatedStringDefaultTypeInternal;
extern TranslatedStringDefaultTypeInternal _TranslatedString_default_instance_;
class TranslatedString_Translation;
struct TranslatedString_TranslationDefaultTypeInternal;
extern TranslatedString_TranslationDefaultTypeInternal _TranslatedString_Translation_default_instance_;
class TripDescriptor;
struct TripDescriptorDefaultTypeInternal;
extern TripDescriptorDefaultTypeInternal _TripDescriptor_default_instance_;
class TripUpdate;
struct TripUpdateDefaultTypeInternal;
extern TripUpdateDefaultTypeInternal _TripUpdate_default_instance_;
class TripUpdate_StopTimeEvent;
struct TripUpdate_StopTimeEventDefaultTypeInternal;
extern TripUpdate_StopTimeEventDefaultTypeInternal _TripUpdate_StopTimeEvent_default_instance_;
class TripUpdate_StopTimeUpdate;
struct TripUpdate_StopTimeUpdateDefaultTypeInternal;
extern TripUpdate_StopTimeUpdateDefaultTypeInternal _TripUpdate_StopTimeUpdate_default_instance_;
class VehicleDescriptor;
struct VehicleDescriptorDefaultTypeInternal;
extern VehicleDescriptorDefaultTypeInternal _VehicleDescriptor_default_instance_;
class VehiclePosition;
struct VehiclePositionDefaultTypeInternal;
extern VehiclePositionDefaultTypeInternal _VehiclePosition_default_instance_;
}  // namespace transit_realtime
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace transit_realtime {
enum FeedHeader_Incrementality : int {
  FeedHeader_Incrementality_FULL_DATASET = 0,
  FeedHeader_Incrementality_DIFFERENTIAL = 1,
  FeedHeader_Incrementality_FeedHeader_Incrementality_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FeedHeader_Incrementality_FeedHeader_Incrementality_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FeedHeader_Incrementality_IsValid(int value);
extern const uint32_t FeedHeader_Incrementality_internal_data_[];
constexpr FeedHeader_Incrementality FeedHeader_Incrementality_Incrementality_MIN = static_cast<FeedHeader_Incrementality>(0);
constexpr FeedHeader_Incrementality FeedHeader_Incrementality_Incrementality_MAX = static_cast<FeedHeader_Incrementality>(1);
constexpr int FeedHeader_Incrementality_Incrementality_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
FeedHeader_Incrementality_descriptor();
template <typename T>
const std::string& FeedHeader_Incrementality_Name(T value) {
  static_assert(std::is_same<T, FeedHeader_Incrementality>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Incrementality_Name().");
  return FeedHeader_Incrementality_Name(static_cast<FeedHeader_Incrementality>(value));
}
template <>
inline const std::string& FeedHeader_Incrementality_Name(FeedHeader_Incrementality value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FeedHeader_Incrementality_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool FeedHeader_Incrementality_Parse(absl::string_view name, FeedHeader_Incrementality* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FeedHeader_Incrementality>(
      FeedHeader_Incrementality_descriptor(), name, value);
}
enum TripUpdate_StopTimeUpdate_ScheduleRelationship : int {
  TripUpdate_StopTimeUpdate_ScheduleRelationship_SCHEDULED = 0,
  TripUpdate_StopTimeUpdate_ScheduleRelationship_SKIPPED = 1,
  TripUpdate_StopTimeUpdate_ScheduleRelationship_NO_DATA = 2,
  TripUpdate_StopTimeUpdate_ScheduleRelationship_TripUpdate_StopTimeUpdate_ScheduleRelationship_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TripUpdate_StopTimeUpdate_ScheduleRelationship_TripUpdate_StopTimeUpdate_ScheduleRelationship_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(int value);
extern const uint32_t TripUpdate_StopTimeUpdate_ScheduleRelationship_internal_data_[];
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MIN = static_cast<TripUpdate_StopTimeUpdate_ScheduleRelationship>(0);
constexpr TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MAX = static_cast<TripUpdate_StopTimeUpdate_ScheduleRelationship>(2);
constexpr int TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor();
template <typename T>
const std::string& TripUpdate_StopTimeUpdate_ScheduleRelationship_Name(T value) {
  static_assert(std::is_same<T, TripUpdate_StopTimeUpdate_ScheduleRelationship>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ScheduleRelationship_Name().");
  return TripUpdate_StopTimeUpdate_ScheduleRelationship_Name(static_cast<TripUpdate_StopTimeUpdate_ScheduleRelationship>(value));
}
template <>
inline const std::string& TripUpdate_StopTimeUpdate_ScheduleRelationship_Name(TripUpdate_StopTimeUpdate_ScheduleRelationship value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TripUpdate_StopTimeUpdate_ScheduleRelationship_Parse(absl::string_view name, TripUpdate_StopTimeUpdate_ScheduleRelationship* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TripUpdate_StopTimeUpdate_ScheduleRelationship>(
      TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor(), name, value);
}
enum VehiclePosition_VehicleStopStatus : int {
  VehiclePosition_VehicleStopStatus_INCOMING_AT = 0,
  VehiclePosition_VehicleStopStatus_STOPPED_AT = 1,
  VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO = 2,
  VehiclePosition_VehicleStopStatus_VehiclePosition_VehicleStopStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VehiclePosition_VehicleStopStatus_VehiclePosition_VehicleStopStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VehiclePosition_VehicleStopStatus_IsValid(int value);
extern const uint32_t VehiclePosition_VehicleStopStatus_internal_data_[];
constexpr VehiclePosition_VehicleStopStatus VehiclePosition_VehicleStopStatus_VehicleStopStatus_MIN = static_cast<VehiclePosition_VehicleStopStatus>(0);
constexpr VehiclePosition_VehicleStopStatus VehiclePosition_VehicleStopStatus_VehicleStopStatus_MAX = static_cast<VehiclePosition_VehicleStopStatus>(2);
constexpr int VehiclePosition_VehicleStopStatus_VehicleStopStatus_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
VehiclePosition_VehicleStopStatus_descriptor();
template <typename T>
const std::string& VehiclePosition_VehicleStopStatus_Name(T value) {
  static_assert(std::is_same<T, VehiclePosition_VehicleStopStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to VehicleStopStatus_Name().");
  return VehiclePosition_VehicleStopStatus_Name(static_cast<VehiclePosition_VehicleStopStatus>(value));
}
template <>
inline const std::string& VehiclePosition_VehicleStopStatus_Name(VehiclePosition_VehicleStopStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VehiclePosition_VehicleStopStatus_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool VehiclePosition_VehicleStopStatus_Parse(absl::string_view name, VehiclePosition_VehicleStopStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehiclePosition_VehicleStopStatus>(
      VehiclePosition_VehicleStopStatus_descriptor(), name, value);
}
enum VehiclePosition_CongestionLevel : int {
  VehiclePosition_CongestionLevel_UNKNOWN_CONGESTION_LEVEL = 0,
  VehiclePosition_CongestionLevel_RUNNING_SMOOTHLY = 1,
  VehiclePosition_CongestionLevel_STOP_AND_GO = 2,
  VehiclePosition_CongestionLevel_CONGESTION = 3,
  VehiclePosition_CongestionLevel_SEVERE_CONGESTION = 4,
  VehiclePosition_CongestionLevel_VehiclePosition_CongestionLevel_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VehiclePosition_CongestionLevel_VehiclePosition_CongestionLevel_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VehiclePosition_CongestionLevel_IsValid(int value);
extern const uint32_t VehiclePosition_CongestionLevel_internal_data_[];
constexpr VehiclePosition_CongestionLevel VehiclePosition_CongestionLevel_CongestionLevel_MIN = static_cast<VehiclePosition_CongestionLevel>(0);
constexpr VehiclePosition_CongestionLevel VehiclePosition_CongestionLevel_CongestionLevel_MAX = static_cast<VehiclePosition_CongestionLevel>(4);
constexpr int VehiclePosition_CongestionLevel_CongestionLevel_ARRAYSIZE = 4 + 1;
const ::google::protobuf::EnumDescriptor*
VehiclePosition_CongestionLevel_descriptor();
template <typename T>
const std::string& VehiclePosition_CongestionLevel_Name(T value) {
  static_assert(std::is_same<T, VehiclePosition_CongestionLevel>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CongestionLevel_Name().");
  return VehiclePosition_CongestionLevel_Name(static_cast<VehiclePosition_CongestionLevel>(value));
}
template <>
inline const std::string& VehiclePosition_CongestionLevel_Name(VehiclePosition_CongestionLevel value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VehiclePosition_CongestionLevel_descriptor,
                                                 0, 4>(
      static_cast<int>(value));
}
inline bool VehiclePosition_CongestionLevel_Parse(absl::string_view name, VehiclePosition_CongestionLevel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehiclePosition_CongestionLevel>(
      VehiclePosition_CongestionLevel_descriptor(), name, value);
}
enum VehiclePosition_OccupancyStatus : int {
  VehiclePosition_OccupancyStatus_EMPTY = 0,
  VehiclePosition_OccupancyStatus_MANY_SEATS_AVAILABLE = 1,
  VehiclePosition_OccupancyStatus_FEW_SEATS_AVAILABLE = 2,
  VehiclePosition_OccupancyStatus_STANDING_ROOM_ONLY = 3,
  VehiclePosition_OccupancyStatus_CRUSHED_STANDING_ROOM_ONLY = 4,
  VehiclePosition_OccupancyStatus_FULL = 5,
  VehiclePosition_OccupancyStatus_NOT_ACCEPTING_PASSENGERS = 6,
  VehiclePosition_OccupancyStatus_VehiclePosition_OccupancyStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  VehiclePosition_OccupancyStatus_VehiclePosition_OccupancyStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool VehiclePosition_OccupancyStatus_IsValid(int value);
extern const uint32_t VehiclePosition_OccupancyStatus_internal_data_[];
constexpr VehiclePosition_OccupancyStatus VehiclePosition_OccupancyStatus_OccupancyStatus_MIN = static_cast<VehiclePosition_OccupancyStatus>(0);
constexpr VehiclePosition_OccupancyStatus VehiclePosition_OccupancyStatus_OccupancyStatus_MAX = static_cast<VehiclePosition_OccupancyStatus>(6);
constexpr int VehiclePosition_OccupancyStatus_OccupancyStatus_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
VehiclePosition_OccupancyStatus_descriptor();
template <typename T>
const std::string& VehiclePosition_OccupancyStatus_Name(T value) {
  static_assert(std::is_same<T, VehiclePosition_OccupancyStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OccupancyStatus_Name().");
  return VehiclePosition_OccupancyStatus_Name(static_cast<VehiclePosition_OccupancyStatus>(value));
}
template <>
inline const std::string& VehiclePosition_OccupancyStatus_Name(VehiclePosition_OccupancyStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<VehiclePosition_OccupancyStatus_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool VehiclePosition_OccupancyStatus_Parse(absl::string_view name, VehiclePosition_OccupancyStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<VehiclePosition_OccupancyStatus>(
      VehiclePosition_OccupancyStatus_descriptor(), name, value);
}
enum Alert_Cause : int {
  Alert_Cause_PROTO3_DEFAULT_CAUSE = 0,
  Alert_Cause_UNKNOWN_CAUSE = 1,
  Alert_Cause_OTHER_CAUSE = 2,
  Alert_Cause_TECHNICAL_PROBLEM = 3,
  Alert_Cause_STRIKE = 4,
  Alert_Cause_DEMONSTRATION = 5,
  Alert_Cause_ACCIDENT = 6,
  Alert_Cause_HOLIDAY = 7,
  Alert_Cause_WEATHER = 8,
  Alert_Cause_MAINTENANCE = 9,
  Alert_Cause_CONSTRUCTION = 10,
  Alert_Cause_POLICE_ACTIVITY = 11,
  Alert_Cause_MEDICAL_EMERGENCY = 12,
  Alert_Cause_Alert_Cause_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Alert_Cause_Alert_Cause_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Alert_Cause_IsValid(int value);
extern const uint32_t Alert_Cause_internal_data_[];
constexpr Alert_Cause Alert_Cause_Cause_MIN = static_cast<Alert_Cause>(0);
constexpr Alert_Cause Alert_Cause_Cause_MAX = static_cast<Alert_Cause>(12);
constexpr int Alert_Cause_Cause_ARRAYSIZE = 12 + 1;
const ::google::protobuf::EnumDescriptor*
Alert_Cause_descriptor();
template <typename T>
const std::string& Alert_Cause_Name(T value) {
  static_assert(std::is_same<T, Alert_Cause>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Cause_Name().");
  return Alert_Cause_Name(static_cast<Alert_Cause>(value));
}
template <>
inline const std::string& Alert_Cause_Name(Alert_Cause value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Alert_Cause_descriptor,
                                                 0, 12>(
      static_cast<int>(value));
}
inline bool Alert_Cause_Parse(absl::string_view name, Alert_Cause* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Alert_Cause>(
      Alert_Cause_descriptor(), name, value);
}
enum Alert_Effect : int {
  Alert_Effect_PROTO3_DEFAULT_EFFECT = 0,
  Alert_Effect_NO_SERVICE = 1,
  Alert_Effect_REDUCED_SERVICE = 2,
  Alert_Effect_SIGNIFICANT_DELAYS = 3,
  Alert_Effect_DETOUR = 4,
  Alert_Effect_ADDITIONAL_SERVICE = 5,
  Alert_Effect_MODIFIED_SERVICE = 6,
  Alert_Effect_OTHER_EFFECT = 7,
  Alert_Effect_UNKNOWN_EFFECT = 8,
  Alert_Effect_STOP_MOVED = 9,
  Alert_Effect_Alert_Effect_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Alert_Effect_Alert_Effect_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Alert_Effect_IsValid(int value);
extern const uint32_t Alert_Effect_internal_data_[];
constexpr Alert_Effect Alert_Effect_Effect_MIN = static_cast<Alert_Effect>(0);
constexpr Alert_Effect Alert_Effect_Effect_MAX = static_cast<Alert_Effect>(9);
constexpr int Alert_Effect_Effect_ARRAYSIZE = 9 + 1;
const ::google::protobuf::EnumDescriptor*
Alert_Effect_descriptor();
template <typename T>
const std::string& Alert_Effect_Name(T value) {
  static_assert(std::is_same<T, Alert_Effect>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Effect_Name().");
  return Alert_Effect_Name(static_cast<Alert_Effect>(value));
}
template <>
inline const std::string& Alert_Effect_Name(Alert_Effect value) {
  return ::google::protobuf::internal::NameOfDenseEnum<Alert_Effect_descriptor,
                                                 0, 9>(
      static_cast<int>(value));
}
inline bool Alert_Effect_Parse(absl::string_view name, Alert_Effect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Alert_Effect>(
      Alert_Effect_descriptor(), name, value);
}
enum TripDescriptor_ScheduleRelationship : int {
  TripDescriptor_ScheduleRelationship_SCHEDULED = 0,
  TripDescriptor_ScheduleRelationship_ADDED = 1,
  TripDescriptor_ScheduleRelationship_UNSCHEDULED = 2,
  TripDescriptor_ScheduleRelationship_CANCELED = 3,
  TripDescriptor_ScheduleRelationship_TripDescriptor_ScheduleRelationship_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TripDescriptor_ScheduleRelationship_TripDescriptor_ScheduleRelationship_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TripDescriptor_ScheduleRelationship_IsValid(int value);
extern const uint32_t TripDescriptor_ScheduleRelationship_internal_data_[];
constexpr TripDescriptor_ScheduleRelationship TripDescriptor_ScheduleRelationship_ScheduleRelationship_MIN = static_cast<TripDescriptor_ScheduleRelationship>(0);
constexpr TripDescriptor_ScheduleRelationship TripDescriptor_ScheduleRelationship_ScheduleRelationship_MAX = static_cast<TripDescriptor_ScheduleRelationship>(3);
constexpr int TripDescriptor_ScheduleRelationship_ScheduleRelationship_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TripDescriptor_ScheduleRelationship_descriptor();
template <typename T>
const std::string& TripDescriptor_ScheduleRelationship_Name(T value) {
  static_assert(std::is_same<T, TripDescriptor_ScheduleRelationship>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ScheduleRelationship_Name().");
  return TripDescriptor_ScheduleRelationship_Name(static_cast<TripDescriptor_ScheduleRelationship>(value));
}
template <>
inline const std::string& TripDescriptor_ScheduleRelationship_Name(TripDescriptor_ScheduleRelationship value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TripDescriptor_ScheduleRelationship_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TripDescriptor_ScheduleRelationship_Parse(absl::string_view name, TripDescriptor_ScheduleRelationship* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TripDescriptor_ScheduleRelationship>(
      TripDescriptor_ScheduleRelationship_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class VehicleDescriptor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.VehicleDescriptor) */ {
 public:
  inline VehicleDescriptor() : VehicleDescriptor(nullptr) {}
  ~VehicleDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VehicleDescriptor(::google::protobuf::internal::ConstantInitialized);

  inline VehicleDescriptor(const VehicleDescriptor& from)
      : VehicleDescriptor(nullptr, from) {}
  VehicleDescriptor(VehicleDescriptor&& from) noexcept
    : VehicleDescriptor() {
    *this = ::std::move(from);
  }

  inline VehicleDescriptor& operator=(const VehicleDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleDescriptor& operator=(VehicleDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehicleDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleDescriptor* internal_default_instance() {
    return reinterpret_cast<const VehicleDescriptor*>(
               &_VehicleDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VehicleDescriptor& a, VehicleDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehicleDescriptor* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehicleDescriptor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehicleDescriptor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VehicleDescriptor& from) {
    VehicleDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehicleDescriptor* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.VehicleDescriptor";
  }
  protected:
  explicit VehicleDescriptor(::google::protobuf::Arena* arena);
  VehicleDescriptor(::google::protobuf::Arena* arena, const VehicleDescriptor& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLabelFieldNumber = 2,
    kLicensePlateFieldNumber = 3,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // string label = 2;
  void clear_label() ;
  const std::string& label() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_label(Arg_&& arg, Args_... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* value);

  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(
      const std::string& value);
  std::string* _internal_mutable_label();

  public:
  // string license_plate = 3;
  void clear_license_plate() ;
  const std::string& license_plate() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_license_plate(Arg_&& arg, Args_... args);
  std::string* mutable_license_plate();
  PROTOBUF_NODISCARD std::string* release_license_plate();
  void set_allocated_license_plate(std::string* value);

  private:
  const std::string& _internal_license_plate() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_license_plate(
      const std::string& value);
  std::string* _internal_mutable_license_plate();

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.VehicleDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      63, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::google::protobuf::internal::ArenaStringPtr label_;
    ::google::protobuf::internal::ArenaStringPtr license_plate_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class TripUpdate_StopTimeEvent final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripUpdate.StopTimeEvent) */ {
 public:
  inline TripUpdate_StopTimeEvent() : TripUpdate_StopTimeEvent(nullptr) {}
  ~TripUpdate_StopTimeEvent() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TripUpdate_StopTimeEvent(::google::protobuf::internal::ConstantInitialized);

  inline TripUpdate_StopTimeEvent(const TripUpdate_StopTimeEvent& from)
      : TripUpdate_StopTimeEvent(nullptr, from) {}
  TripUpdate_StopTimeEvent(TripUpdate_StopTimeEvent&& from) noexcept
    : TripUpdate_StopTimeEvent() {
    *this = ::std::move(from);
  }

  inline TripUpdate_StopTimeEvent& operator=(const TripUpdate_StopTimeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripUpdate_StopTimeEvent& operator=(TripUpdate_StopTimeEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TripUpdate_StopTimeEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripUpdate_StopTimeEvent* internal_default_instance() {
    return reinterpret_cast<const TripUpdate_StopTimeEvent*>(
               &_TripUpdate_StopTimeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TripUpdate_StopTimeEvent& a, TripUpdate_StopTimeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(TripUpdate_StopTimeEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripUpdate_StopTimeEvent* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripUpdate_StopTimeEvent* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripUpdate_StopTimeEvent>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TripUpdate_StopTimeEvent& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TripUpdate_StopTimeEvent& from) {
    TripUpdate_StopTimeEvent::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TripUpdate_StopTimeEvent* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.TripUpdate.StopTimeEvent";
  }
  protected:
  explicit TripUpdate_StopTimeEvent(::google::protobuf::Arena* arena);
  TripUpdate_StopTimeEvent(::google::protobuf::Arena* arena, const TripUpdate_StopTimeEvent& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 2,
    kDelayFieldNumber = 1,
    kUncertaintyFieldNumber = 3,
  };
  // int64 time = 2;
  void clear_time() ;
  ::int64_t time() const;
  void set_time(::int64_t value);

  private:
  ::int64_t _internal_time() const;
  void _internal_set_time(::int64_t value);

  public:
  // int32 delay = 1;
  void clear_delay() ;
  ::int32_t delay() const;
  void set_delay(::int32_t value);

  private:
  ::int32_t _internal_delay() const;
  void _internal_set_delay(::int32_t value);

  public:
  // int32 uncertainty = 3;
  void clear_uncertainty() ;
  ::int32_t uncertainty() const;
  void set_uncertainty(::int32_t value);

  private:
  ::int32_t _internal_uncertainty() const;
  void _internal_set_uncertainty(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeEvent)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int64_t time_;
    ::int32_t delay_;
    ::int32_t uncertainty_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class TripDescriptor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripDescriptor) */ {
 public:
  inline TripDescriptor() : TripDescriptor(nullptr) {}
  ~TripDescriptor() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TripDescriptor(::google::protobuf::internal::ConstantInitialized);

  inline TripDescriptor(const TripDescriptor& from)
      : TripDescriptor(nullptr, from) {}
  TripDescriptor(TripDescriptor&& from) noexcept
    : TripDescriptor() {
    *this = ::std::move(from);
  }

  inline TripDescriptor& operator=(const TripDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripDescriptor& operator=(TripDescriptor&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TripDescriptor& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripDescriptor* internal_default_instance() {
    return reinterpret_cast<const TripDescriptor*>(
               &_TripDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TripDescriptor& a, TripDescriptor& b) {
    a.Swap(&b);
  }
  inline void Swap(TripDescriptor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripDescriptor* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripDescriptor* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripDescriptor>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TripDescriptor& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TripDescriptor& from) {
    TripDescriptor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TripDescriptor* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.TripDescriptor";
  }
  protected:
  explicit TripDescriptor(::google::protobuf::Arena* arena);
  TripDescriptor(::google::protobuf::Arena* arena, const TripDescriptor& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ScheduleRelationship = TripDescriptor_ScheduleRelationship;
  static constexpr ScheduleRelationship SCHEDULED = TripDescriptor_ScheduleRelationship_SCHEDULED;
  static constexpr ScheduleRelationship ADDED = TripDescriptor_ScheduleRelationship_ADDED;
  static constexpr ScheduleRelationship UNSCHEDULED = TripDescriptor_ScheduleRelationship_UNSCHEDULED;
  static constexpr ScheduleRelationship CANCELED = TripDescriptor_ScheduleRelationship_CANCELED;
  static inline bool ScheduleRelationship_IsValid(int value) {
    return TripDescriptor_ScheduleRelationship_IsValid(value);
  }
  static constexpr ScheduleRelationship ScheduleRelationship_MIN = TripDescriptor_ScheduleRelationship_ScheduleRelationship_MIN;
  static constexpr ScheduleRelationship ScheduleRelationship_MAX = TripDescriptor_ScheduleRelationship_ScheduleRelationship_MAX;
  static constexpr int ScheduleRelationship_ARRAYSIZE = TripDescriptor_ScheduleRelationship_ScheduleRelationship_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ScheduleRelationship_descriptor() {
    return TripDescriptor_ScheduleRelationship_descriptor();
  }
  template <typename T>
  static inline const std::string& ScheduleRelationship_Name(T value) {
    return TripDescriptor_ScheduleRelationship_Name(value);
  }
  static inline bool ScheduleRelationship_Parse(absl::string_view name, ScheduleRelationship* value) {
    return TripDescriptor_ScheduleRelationship_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTripIdFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kStartDateFieldNumber = 3,
    kRouteIdFieldNumber = 5,
    kScheduleRelationshipFieldNumber = 4,
    kDirectionIdFieldNumber = 6,
  };
  // string trip_id = 1;
  void clear_trip_id() ;
  const std::string& trip_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_trip_id(Arg_&& arg, Args_... args);
  std::string* mutable_trip_id();
  PROTOBUF_NODISCARD std::string* release_trip_id();
  void set_allocated_trip_id(std::string* value);

  private:
  const std::string& _internal_trip_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_trip_id(
      const std::string& value);
  std::string* _internal_mutable_trip_id();

  public:
  // string start_time = 2;
  void clear_start_time() ;
  const std::string& start_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_time(Arg_&& arg, Args_... args);
  std::string* mutable_start_time();
  PROTOBUF_NODISCARD std::string* release_start_time();
  void set_allocated_start_time(std::string* value);

  private:
  const std::string& _internal_start_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_time(
      const std::string& value);
  std::string* _internal_mutable_start_time();

  public:
  // string start_date = 3;
  void clear_start_date() ;
  const std::string& start_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_start_date(Arg_&& arg, Args_... args);
  std::string* mutable_start_date();
  PROTOBUF_NODISCARD std::string* release_start_date();
  void set_allocated_start_date(std::string* value);

  private:
  const std::string& _internal_start_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start_date(
      const std::string& value);
  std::string* _internal_mutable_start_date();

  public:
  // string route_id = 5;
  void clear_route_id() ;
  const std::string& route_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_route_id(Arg_&& arg, Args_... args);
  std::string* mutable_route_id();
  PROTOBUF_NODISCARD std::string* release_route_id();
  void set_allocated_route_id(std::string* value);

  private:
  const std::string& _internal_route_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route_id(
      const std::string& value);
  std::string* _internal_mutable_route_id();

  public:
  // .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
  void clear_schedule_relationship() ;
  ::transit_realtime::TripDescriptor_ScheduleRelationship schedule_relationship() const;
  void set_schedule_relationship(::transit_realtime::TripDescriptor_ScheduleRelationship value);

  private:
  ::transit_realtime::TripDescriptor_ScheduleRelationship _internal_schedule_relationship() const;
  void _internal_set_schedule_relationship(::transit_realtime::TripDescriptor_ScheduleRelationship value);

  public:
  // uint32 direction_id = 6;
  void clear_direction_id() ;
  ::uint32_t direction_id() const;
  void set_direction_id(::uint32_t value);

  private:
  ::uint32_t _internal_direction_id() const;
  void _internal_set_direction_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.TripDescriptor)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      75, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr trip_id_;
    ::google::protobuf::internal::ArenaStringPtr start_time_;
    ::google::protobuf::internal::ArenaStringPtr start_date_;
    ::google::protobuf::internal::ArenaStringPtr route_id_;
    int schedule_relationship_;
    ::uint32_t direction_id_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class TranslatedString_Translation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TranslatedString.Translation) */ {
 public:
  inline TranslatedString_Translation() : TranslatedString_Translation(nullptr) {}
  ~TranslatedString_Translation() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TranslatedString_Translation(::google::protobuf::internal::ConstantInitialized);

  inline TranslatedString_Translation(const TranslatedString_Translation& from)
      : TranslatedString_Translation(nullptr, from) {}
  TranslatedString_Translation(TranslatedString_Translation&& from) noexcept
    : TranslatedString_Translation() {
    *this = ::std::move(from);
  }

  inline TranslatedString_Translation& operator=(const TranslatedString_Translation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslatedString_Translation& operator=(TranslatedString_Translation&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslatedString_Translation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslatedString_Translation* internal_default_instance() {
    return reinterpret_cast<const TranslatedString_Translation*>(
               &_TranslatedString_Translation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TranslatedString_Translation& a, TranslatedString_Translation& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslatedString_Translation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslatedString_Translation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslatedString_Translation* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslatedString_Translation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TranslatedString_Translation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TranslatedString_Translation& from) {
    TranslatedString_Translation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TranslatedString_Translation* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.TranslatedString.Translation";
  }
  protected:
  explicit TranslatedString_Translation(::google::protobuf::Arena* arena);
  TranslatedString_Translation(::google::protobuf::Arena* arena, const TranslatedString_Translation& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextFieldNumber = 1,
    kLanguageFieldNumber = 2,
  };
  // string text = 1;
  void clear_text() ;
  const std::string& text() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_text(Arg_&& arg, Args_... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* value);

  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(
      const std::string& value);
  std::string* _internal_mutable_text();

  public:
  // string language = 2;
  void clear_language() ;
  const std::string& language() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_language(Arg_&& arg, Args_... args);
  std::string* mutable_language();
  PROTOBUF_NODISCARD std::string* release_language();
  void set_allocated_language(std::string* value);

  private:
  const std::string& _internal_language() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_language(
      const std::string& value);
  std::string* _internal_mutable_language();

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedString.Translation)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      66, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr text_;
    ::google::protobuf::internal::ArenaStringPtr language_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class TimeRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TimeRange) */ {
 public:
  inline TimeRange() : TimeRange(nullptr) {}
  ~TimeRange() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TimeRange(::google::protobuf::internal::ConstantInitialized);

  inline TimeRange(const TimeRange& from)
      : TimeRange(nullptr, from) {}
  TimeRange(TimeRange&& from) noexcept
    : TimeRange() {
    *this = ::std::move(from);
  }

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
               &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TimeRange& a, TimeRange& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeRange* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeRange* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeRange>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TimeRange& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TimeRange& from) {
    TimeRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TimeRange* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.TimeRange";
  }
  protected:
  explicit TimeRange(::google::protobuf::Arena* arena);
  TimeRange(::google::protobuf::Arena* arena, const TimeRange& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // uint64 start = 1;
  void clear_start() ;
  ::uint64_t start() const;
  void set_start(::uint64_t value);

  private:
  ::uint64_t _internal_start() const;
  void _internal_set_start(::uint64_t value);

  public:
  // uint64 end = 2;
  void clear_end() ;
  ::uint64_t end() const;
  void set_end(::uint64_t value);

  private:
  ::uint64_t _internal_end() const;
  void _internal_set_end(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.TimeRange)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::uint64_t start_;
    ::uint64_t end_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class Position final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Position(::google::protobuf::internal::ConstantInitialized);

  inline Position(const Position& from)
      : Position(nullptr, from) {}
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Position* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.Position";
  }
  protected:
  explicit Position(::google::protobuf::Arena* arena);
  Position(::google::protobuf::Arena* arena, const Position& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kOdometerFieldNumber = 4,
    kBearingFieldNumber = 3,
    kSpeedFieldNumber = 5,
  };
  // float latitude = 1;
  void clear_latitude() ;
  float latitude() const;
  void set_latitude(float value);

  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);

  public:
  // float longitude = 2;
  void clear_longitude() ;
  float longitude() const;
  void set_longitude(float value);

  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);

  public:
  // double odometer = 4;
  void clear_odometer() ;
  double odometer() const;
  void set_odometer(double value);

  private:
  double _internal_odometer() const;
  void _internal_set_odometer(double value);

  public:
  // float bearing = 3;
  void clear_bearing() ;
  float bearing() const;
  void set_bearing(float value);

  private:
  float _internal_bearing() const;
  void _internal_set_bearing(float value);

  public:
  // float speed = 5;
  void clear_speed() ;
  float speed() const;
  void set_speed(float value);

  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.Position)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float latitude_;
    float longitude_;
    double odometer_;
    float bearing_;
    float speed_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class FeedHeader final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.FeedHeader) */ {
 public:
  inline FeedHeader() : FeedHeader(nullptr) {}
  ~FeedHeader() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeedHeader(::google::protobuf::internal::ConstantInitialized);

  inline FeedHeader(const FeedHeader& from)
      : FeedHeader(nullptr, from) {}
  FeedHeader(FeedHeader&& from) noexcept
    : FeedHeader() {
    *this = ::std::move(from);
  }

  inline FeedHeader& operator=(const FeedHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedHeader& operator=(FeedHeader&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedHeader& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedHeader* internal_default_instance() {
    return reinterpret_cast<const FeedHeader*>(
               &_FeedHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FeedHeader& a, FeedHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedHeader* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedHeader* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedHeader* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedHeader>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FeedHeader& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FeedHeader& from) {
    FeedHeader::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FeedHeader* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.FeedHeader";
  }
  protected:
  explicit FeedHeader(::google::protobuf::Arena* arena);
  FeedHeader(::google::protobuf::Arena* arena, const FeedHeader& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Incrementality = FeedHeader_Incrementality;
  static constexpr Incrementality FULL_DATASET = FeedHeader_Incrementality_FULL_DATASET;
  static constexpr Incrementality DIFFERENTIAL = FeedHeader_Incrementality_DIFFERENTIAL;
  static inline bool Incrementality_IsValid(int value) {
    return FeedHeader_Incrementality_IsValid(value);
  }
  static constexpr Incrementality Incrementality_MIN = FeedHeader_Incrementality_Incrementality_MIN;
  static constexpr Incrementality Incrementality_MAX = FeedHeader_Incrementality_Incrementality_MAX;
  static constexpr int Incrementality_ARRAYSIZE = FeedHeader_Incrementality_Incrementality_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Incrementality_descriptor() {
    return FeedHeader_Incrementality_descriptor();
  }
  template <typename T>
  static inline const std::string& Incrementality_Name(T value) {
    return FeedHeader_Incrementality_Name(value);
  }
  static inline bool Incrementality_Parse(absl::string_view name, Incrementality* value) {
    return FeedHeader_Incrementality_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kGtfsRealtimeVersionFieldNumber = 1,
    kTimestampFieldNumber = 3,
    kIncrementalityFieldNumber = 2,
  };
  // string gtfs_realtime_version = 1;
  void clear_gtfs_realtime_version() ;
  const std::string& gtfs_realtime_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gtfs_realtime_version(Arg_&& arg, Args_... args);
  std::string* mutable_gtfs_realtime_version();
  PROTOBUF_NODISCARD std::string* release_gtfs_realtime_version();
  void set_allocated_gtfs_realtime_version(std::string* value);

  private:
  const std::string& _internal_gtfs_realtime_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gtfs_realtime_version(
      const std::string& value);
  std::string* _internal_mutable_gtfs_realtime_version();

  public:
  // uint64 timestamp = 3;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // .transit_realtime.FeedHeader.Incrementality incrementality = 2;
  void clear_incrementality() ;
  ::transit_realtime::FeedHeader_Incrementality incrementality() const;
  void set_incrementality(::transit_realtime::FeedHeader_Incrementality value);

  private:
  ::transit_realtime::FeedHeader_Incrementality _internal_incrementality() const;
  void _internal_set_incrementality(::transit_realtime::FeedHeader_Incrementality value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.FeedHeader)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      57, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr gtfs_realtime_version_;
    ::uint64_t timestamp_;
    int incrementality_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class VehiclePosition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.VehiclePosition) */ {
 public:
  inline VehiclePosition() : VehiclePosition(nullptr) {}
  ~VehiclePosition() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR VehiclePosition(::google::protobuf::internal::ConstantInitialized);

  inline VehiclePosition(const VehiclePosition& from)
      : VehiclePosition(nullptr, from) {}
  VehiclePosition(VehiclePosition&& from) noexcept
    : VehiclePosition() {
    *this = ::std::move(from);
  }

  inline VehiclePosition& operator=(const VehiclePosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehiclePosition& operator=(VehiclePosition&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VehiclePosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehiclePosition* internal_default_instance() {
    return reinterpret_cast<const VehiclePosition*>(
               &_VehiclePosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VehiclePosition& a, VehiclePosition& b) {
    a.Swap(&b);
  }
  inline void Swap(VehiclePosition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehiclePosition* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VehiclePosition* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VehiclePosition>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const VehiclePosition& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const VehiclePosition& from) {
    VehiclePosition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(VehiclePosition* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.VehiclePosition";
  }
  protected:
  explicit VehiclePosition(::google::protobuf::Arena* arena);
  VehiclePosition(::google::protobuf::Arena* arena, const VehiclePosition& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using VehicleStopStatus = VehiclePosition_VehicleStopStatus;
  static constexpr VehicleStopStatus INCOMING_AT = VehiclePosition_VehicleStopStatus_INCOMING_AT;
  static constexpr VehicleStopStatus STOPPED_AT = VehiclePosition_VehicleStopStatus_STOPPED_AT;
  static constexpr VehicleStopStatus IN_TRANSIT_TO = VehiclePosition_VehicleStopStatus_IN_TRANSIT_TO;
  static inline bool VehicleStopStatus_IsValid(int value) {
    return VehiclePosition_VehicleStopStatus_IsValid(value);
  }
  static constexpr VehicleStopStatus VehicleStopStatus_MIN = VehiclePosition_VehicleStopStatus_VehicleStopStatus_MIN;
  static constexpr VehicleStopStatus VehicleStopStatus_MAX = VehiclePosition_VehicleStopStatus_VehicleStopStatus_MAX;
  static constexpr int VehicleStopStatus_ARRAYSIZE = VehiclePosition_VehicleStopStatus_VehicleStopStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* VehicleStopStatus_descriptor() {
    return VehiclePosition_VehicleStopStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& VehicleStopStatus_Name(T value) {
    return VehiclePosition_VehicleStopStatus_Name(value);
  }
  static inline bool VehicleStopStatus_Parse(absl::string_view name, VehicleStopStatus* value) {
    return VehiclePosition_VehicleStopStatus_Parse(name, value);
  }

  using CongestionLevel = VehiclePosition_CongestionLevel;
  static constexpr CongestionLevel UNKNOWN_CONGESTION_LEVEL = VehiclePosition_CongestionLevel_UNKNOWN_CONGESTION_LEVEL;
  static constexpr CongestionLevel RUNNING_SMOOTHLY = VehiclePosition_CongestionLevel_RUNNING_SMOOTHLY;
  static constexpr CongestionLevel STOP_AND_GO = VehiclePosition_CongestionLevel_STOP_AND_GO;
  static constexpr CongestionLevel CONGESTION = VehiclePosition_CongestionLevel_CONGESTION;
  static constexpr CongestionLevel SEVERE_CONGESTION = VehiclePosition_CongestionLevel_SEVERE_CONGESTION;
  static inline bool CongestionLevel_IsValid(int value) {
    return VehiclePosition_CongestionLevel_IsValid(value);
  }
  static constexpr CongestionLevel CongestionLevel_MIN = VehiclePosition_CongestionLevel_CongestionLevel_MIN;
  static constexpr CongestionLevel CongestionLevel_MAX = VehiclePosition_CongestionLevel_CongestionLevel_MAX;
  static constexpr int CongestionLevel_ARRAYSIZE = VehiclePosition_CongestionLevel_CongestionLevel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* CongestionLevel_descriptor() {
    return VehiclePosition_CongestionLevel_descriptor();
  }
  template <typename T>
  static inline const std::string& CongestionLevel_Name(T value) {
    return VehiclePosition_CongestionLevel_Name(value);
  }
  static inline bool CongestionLevel_Parse(absl::string_view name, CongestionLevel* value) {
    return VehiclePosition_CongestionLevel_Parse(name, value);
  }

  using OccupancyStatus = VehiclePosition_OccupancyStatus;
  static constexpr OccupancyStatus EMPTY = VehiclePosition_OccupancyStatus_EMPTY;
  static constexpr OccupancyStatus MANY_SEATS_AVAILABLE = VehiclePosition_OccupancyStatus_MANY_SEATS_AVAILABLE;
  static constexpr OccupancyStatus FEW_SEATS_AVAILABLE = VehiclePosition_OccupancyStatus_FEW_SEATS_AVAILABLE;
  static constexpr OccupancyStatus STANDING_ROOM_ONLY = VehiclePosition_OccupancyStatus_STANDING_ROOM_ONLY;
  static constexpr OccupancyStatus CRUSHED_STANDING_ROOM_ONLY = VehiclePosition_OccupancyStatus_CRUSHED_STANDING_ROOM_ONLY;
  static constexpr OccupancyStatus FULL = VehiclePosition_OccupancyStatus_FULL;
  static constexpr OccupancyStatus NOT_ACCEPTING_PASSENGERS = VehiclePosition_OccupancyStatus_NOT_ACCEPTING_PASSENGERS;
  static inline bool OccupancyStatus_IsValid(int value) {
    return VehiclePosition_OccupancyStatus_IsValid(value);
  }
  static constexpr OccupancyStatus OccupancyStatus_MIN = VehiclePosition_OccupancyStatus_OccupancyStatus_MIN;
  static constexpr OccupancyStatus OccupancyStatus_MAX = VehiclePosition_OccupancyStatus_OccupancyStatus_MAX;
  static constexpr int OccupancyStatus_ARRAYSIZE = VehiclePosition_OccupancyStatus_OccupancyStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* OccupancyStatus_descriptor() {
    return VehiclePosition_OccupancyStatus_descriptor();
  }
  template <typename T>
  static inline const std::string& OccupancyStatus_Name(T value) {
    return VehiclePosition_OccupancyStatus_Name(value);
  }
  static inline bool OccupancyStatus_Parse(absl::string_view name, OccupancyStatus* value) {
    return VehiclePosition_OccupancyStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdFieldNumber = 7,
    kTripFieldNumber = 1,
    kPositionFieldNumber = 2,
    kVehicleFieldNumber = 8,
    kCurrentStopSequenceFieldNumber = 3,
    kCurrentStatusFieldNumber = 4,
    kTimestampFieldNumber = 5,
    kCongestionLevelFieldNumber = 6,
    kOccupancyStatusFieldNumber = 9,
  };
  // string stop_id = 7;
  void clear_stop_id() ;
  const std::string& stop_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stop_id(Arg_&& arg, Args_... args);
  std::string* mutable_stop_id();
  PROTOBUF_NODISCARD std::string* release_stop_id();
  void set_allocated_stop_id(std::string* value);

  private:
  const std::string& _internal_stop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_id(
      const std::string& value);
  std::string* _internal_mutable_stop_id();

  public:
  // .transit_realtime.TripDescriptor trip = 1;
  bool has_trip() const;
  void clear_trip() ;
  const ::transit_realtime::TripDescriptor& trip() const;
  PROTOBUF_NODISCARD ::transit_realtime::TripDescriptor* release_trip();
  ::transit_realtime::TripDescriptor* mutable_trip();
  void set_allocated_trip(::transit_realtime::TripDescriptor* value);
  void unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor* value);
  ::transit_realtime::TripDescriptor* unsafe_arena_release_trip();

  private:
  const ::transit_realtime::TripDescriptor& _internal_trip() const;
  ::transit_realtime::TripDescriptor* _internal_mutable_trip();

  public:
  // .transit_realtime.Position position = 2;
  bool has_position() const;
  void clear_position() ;
  const ::transit_realtime::Position& position() const;
  PROTOBUF_NODISCARD ::transit_realtime::Position* release_position();
  ::transit_realtime::Position* mutable_position();
  void set_allocated_position(::transit_realtime::Position* value);
  void unsafe_arena_set_allocated_position(::transit_realtime::Position* value);
  ::transit_realtime::Position* unsafe_arena_release_position();

  private:
  const ::transit_realtime::Position& _internal_position() const;
  ::transit_realtime::Position* _internal_mutable_position();

  public:
  // .transit_realtime.VehicleDescriptor vehicle = 8;
  bool has_vehicle() const;
  void clear_vehicle() ;
  const ::transit_realtime::VehicleDescriptor& vehicle() const;
  PROTOBUF_NODISCARD ::transit_realtime::VehicleDescriptor* release_vehicle();
  ::transit_realtime::VehicleDescriptor* mutable_vehicle();
  void set_allocated_vehicle(::transit_realtime::VehicleDescriptor* value);
  void unsafe_arena_set_allocated_vehicle(::transit_realtime::VehicleDescriptor* value);
  ::transit_realtime::VehicleDescriptor* unsafe_arena_release_vehicle();

  private:
  const ::transit_realtime::VehicleDescriptor& _internal_vehicle() const;
  ::transit_realtime::VehicleDescriptor* _internal_mutable_vehicle();

  public:
  // uint32 current_stop_sequence = 3;
  void clear_current_stop_sequence() ;
  ::uint32_t current_stop_sequence() const;
  void set_current_stop_sequence(::uint32_t value);

  private:
  ::uint32_t _internal_current_stop_sequence() const;
  void _internal_set_current_stop_sequence(::uint32_t value);

  public:
  // .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;
  void clear_current_status() ;
  ::transit_realtime::VehiclePosition_VehicleStopStatus current_status() const;
  void set_current_status(::transit_realtime::VehiclePosition_VehicleStopStatus value);

  private:
  ::transit_realtime::VehiclePosition_VehicleStopStatus _internal_current_status() const;
  void _internal_set_current_status(::transit_realtime::VehiclePosition_VehicleStopStatus value);

  public:
  // uint64 timestamp = 5;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
  void clear_congestion_level() ;
  ::transit_realtime::VehiclePosition_CongestionLevel congestion_level() const;
  void set_congestion_level(::transit_realtime::VehiclePosition_CongestionLevel value);

  private:
  ::transit_realtime::VehiclePosition_CongestionLevel _internal_congestion_level() const;
  void _internal_set_congestion_level(::transit_realtime::VehiclePosition_CongestionLevel value);

  public:
  // .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
  void clear_occupancy_status() ;
  ::transit_realtime::VehiclePosition_OccupancyStatus occupancy_status() const;
  void set_occupancy_status(::transit_realtime::VehiclePosition_OccupancyStatus value);

  private:
  ::transit_realtime::VehiclePosition_OccupancyStatus _internal_occupancy_status() const;
  void _internal_set_occupancy_status(::transit_realtime::VehiclePosition_OccupancyStatus value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.VehiclePosition)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 3,
      56, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr stop_id_;
    ::transit_realtime::TripDescriptor* trip_;
    ::transit_realtime::Position* position_;
    ::transit_realtime::VehicleDescriptor* vehicle_;
    ::uint32_t current_stop_sequence_;
    int current_status_;
    ::uint64_t timestamp_;
    int congestion_level_;
    int occupancy_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class TripUpdate_StopTimeUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripUpdate.StopTimeUpdate) */ {
 public:
  inline TripUpdate_StopTimeUpdate() : TripUpdate_StopTimeUpdate(nullptr) {}
  ~TripUpdate_StopTimeUpdate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TripUpdate_StopTimeUpdate(::google::protobuf::internal::ConstantInitialized);

  inline TripUpdate_StopTimeUpdate(const TripUpdate_StopTimeUpdate& from)
      : TripUpdate_StopTimeUpdate(nullptr, from) {}
  TripUpdate_StopTimeUpdate(TripUpdate_StopTimeUpdate&& from) noexcept
    : TripUpdate_StopTimeUpdate() {
    *this = ::std::move(from);
  }

  inline TripUpdate_StopTimeUpdate& operator=(const TripUpdate_StopTimeUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripUpdate_StopTimeUpdate& operator=(TripUpdate_StopTimeUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TripUpdate_StopTimeUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripUpdate_StopTimeUpdate* internal_default_instance() {
    return reinterpret_cast<const TripUpdate_StopTimeUpdate*>(
               &_TripUpdate_StopTimeUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TripUpdate_StopTimeUpdate& a, TripUpdate_StopTimeUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TripUpdate_StopTimeUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripUpdate_StopTimeUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripUpdate_StopTimeUpdate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripUpdate_StopTimeUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TripUpdate_StopTimeUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TripUpdate_StopTimeUpdate& from) {
    TripUpdate_StopTimeUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TripUpdate_StopTimeUpdate* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.TripUpdate.StopTimeUpdate";
  }
  protected:
  explicit TripUpdate_StopTimeUpdate(::google::protobuf::Arena* arena);
  TripUpdate_StopTimeUpdate(::google::protobuf::Arena* arena, const TripUpdate_StopTimeUpdate& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using ScheduleRelationship = TripUpdate_StopTimeUpdate_ScheduleRelationship;
  static constexpr ScheduleRelationship SCHEDULED = TripUpdate_StopTimeUpdate_ScheduleRelationship_SCHEDULED;
  static constexpr ScheduleRelationship SKIPPED = TripUpdate_StopTimeUpdate_ScheduleRelationship_SKIPPED;
  static constexpr ScheduleRelationship NO_DATA = TripUpdate_StopTimeUpdate_ScheduleRelationship_NO_DATA;
  static inline bool ScheduleRelationship_IsValid(int value) {
    return TripUpdate_StopTimeUpdate_ScheduleRelationship_IsValid(value);
  }
  static constexpr ScheduleRelationship ScheduleRelationship_MIN = TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MIN;
  static constexpr ScheduleRelationship ScheduleRelationship_MAX = TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_MAX;
  static constexpr int ScheduleRelationship_ARRAYSIZE = TripUpdate_StopTimeUpdate_ScheduleRelationship_ScheduleRelationship_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* ScheduleRelationship_descriptor() {
    return TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor();
  }
  template <typename T>
  static inline const std::string& ScheduleRelationship_Name(T value) {
    return TripUpdate_StopTimeUpdate_ScheduleRelationship_Name(value);
  }
  static inline bool ScheduleRelationship_Parse(absl::string_view name, ScheduleRelationship* value) {
    return TripUpdate_StopTimeUpdate_ScheduleRelationship_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStopIdFieldNumber = 4,
    kArrivalFieldNumber = 2,
    kDepartureFieldNumber = 3,
    kStopSequenceFieldNumber = 1,
    kScheduleRelationshipFieldNumber = 5,
  };
  // string stop_id = 4;
  void clear_stop_id() ;
  const std::string& stop_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stop_id(Arg_&& arg, Args_... args);
  std::string* mutable_stop_id();
  PROTOBUF_NODISCARD std::string* release_stop_id();
  void set_allocated_stop_id(std::string* value);

  private:
  const std::string& _internal_stop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_id(
      const std::string& value);
  std::string* _internal_mutable_stop_id();

  public:
  // .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
  bool has_arrival() const;
  void clear_arrival() ;
  const ::transit_realtime::TripUpdate_StopTimeEvent& arrival() const;
  PROTOBUF_NODISCARD ::transit_realtime::TripUpdate_StopTimeEvent* release_arrival();
  ::transit_realtime::TripUpdate_StopTimeEvent* mutable_arrival();
  void set_allocated_arrival(::transit_realtime::TripUpdate_StopTimeEvent* value);
  void unsafe_arena_set_allocated_arrival(::transit_realtime::TripUpdate_StopTimeEvent* value);
  ::transit_realtime::TripUpdate_StopTimeEvent* unsafe_arena_release_arrival();

  private:
  const ::transit_realtime::TripUpdate_StopTimeEvent& _internal_arrival() const;
  ::transit_realtime::TripUpdate_StopTimeEvent* _internal_mutable_arrival();

  public:
  // .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
  bool has_departure() const;
  void clear_departure() ;
  const ::transit_realtime::TripUpdate_StopTimeEvent& departure() const;
  PROTOBUF_NODISCARD ::transit_realtime::TripUpdate_StopTimeEvent* release_departure();
  ::transit_realtime::TripUpdate_StopTimeEvent* mutable_departure();
  void set_allocated_departure(::transit_realtime::TripUpdate_StopTimeEvent* value);
  void unsafe_arena_set_allocated_departure(::transit_realtime::TripUpdate_StopTimeEvent* value);
  ::transit_realtime::TripUpdate_StopTimeEvent* unsafe_arena_release_departure();

  private:
  const ::transit_realtime::TripUpdate_StopTimeEvent& _internal_departure() const;
  ::transit_realtime::TripUpdate_StopTimeEvent* _internal_mutable_departure();

  public:
  // uint32 stop_sequence = 1;
  void clear_stop_sequence() ;
  ::uint32_t stop_sequence() const;
  void set_stop_sequence(::uint32_t value);

  private:
  ::uint32_t _internal_stop_sequence() const;
  void _internal_set_stop_sequence(::uint32_t value);

  public:
  // .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
  void clear_schedule_relationship() ;
  ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship schedule_relationship() const;
  void set_schedule_relationship(::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value);

  private:
  ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship _internal_schedule_relationship() const;
  void _internal_set_schedule_relationship(::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate.StopTimeUpdate)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      58, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr stop_id_;
    ::transit_realtime::TripUpdate_StopTimeEvent* arrival_;
    ::transit_realtime::TripUpdate_StopTimeEvent* departure_;
    ::uint32_t stop_sequence_;
    int schedule_relationship_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class TranslatedString final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TranslatedString) */ {
 public:
  inline TranslatedString() : TranslatedString(nullptr) {}
  ~TranslatedString() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TranslatedString(::google::protobuf::internal::ConstantInitialized);

  inline TranslatedString(const TranslatedString& from)
      : TranslatedString(nullptr, from) {}
  TranslatedString(TranslatedString&& from) noexcept
    : TranslatedString() {
    *this = ::std::move(from);
  }

  inline TranslatedString& operator=(const TranslatedString& from) {
    CopyFrom(from);
    return *this;
  }
  inline TranslatedString& operator=(TranslatedString&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TranslatedString& default_instance() {
    return *internal_default_instance();
  }
  static inline const TranslatedString* internal_default_instance() {
    return reinterpret_cast<const TranslatedString*>(
               &_TranslatedString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TranslatedString& a, TranslatedString& b) {
    a.Swap(&b);
  }
  inline void Swap(TranslatedString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TranslatedString* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TranslatedString* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TranslatedString>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TranslatedString& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TranslatedString& from) {
    TranslatedString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TranslatedString* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.TranslatedString";
  }
  protected:
  explicit TranslatedString(::google::protobuf::Arena* arena);
  TranslatedString(::google::protobuf::Arena* arena, const TranslatedString& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Translation = TranslatedString_Translation;

  // accessors -------------------------------------------------------

  enum : int {
    kTranslationFieldNumber = 1,
  };
  // repeated .transit_realtime.TranslatedString.Translation translation = 1;
  int translation_size() const;
  private:
  int _internal_translation_size() const;

  public:
  void clear_translation() ;
  ::transit_realtime::TranslatedString_Translation* mutable_translation(int index);
  ::google::protobuf::RepeatedPtrField< ::transit_realtime::TranslatedString_Translation >*
      mutable_translation();
  private:
  const ::google::protobuf::RepeatedPtrField<::transit_realtime::TranslatedString_Translation>& _internal_translation() const;
  ::google::protobuf::RepeatedPtrField<::transit_realtime::TranslatedString_Translation>* _internal_mutable_translation();
  public:
  const ::transit_realtime::TranslatedString_Translation& translation(int index) const;
  ::transit_realtime::TranslatedString_Translation* add_translation();
  const ::google::protobuf::RepeatedPtrField< ::transit_realtime::TranslatedString_Translation >&
      translation() const;
  // @@protoc_insertion_point(class_scope:transit_realtime.TranslatedString)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField< ::transit_realtime::TranslatedString_Translation > translation_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class EntitySelector final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.EntitySelector) */ {
 public:
  inline EntitySelector() : EntitySelector(nullptr) {}
  ~EntitySelector() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR EntitySelector(::google::protobuf::internal::ConstantInitialized);

  inline EntitySelector(const EntitySelector& from)
      : EntitySelector(nullptr, from) {}
  EntitySelector(EntitySelector&& from) noexcept
    : EntitySelector() {
    *this = ::std::move(from);
  }

  inline EntitySelector& operator=(const EntitySelector& from) {
    CopyFrom(from);
    return *this;
  }
  inline EntitySelector& operator=(EntitySelector&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EntitySelector& default_instance() {
    return *internal_default_instance();
  }
  static inline const EntitySelector* internal_default_instance() {
    return reinterpret_cast<const EntitySelector*>(
               &_EntitySelector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EntitySelector& a, EntitySelector& b) {
    a.Swap(&b);
  }
  inline void Swap(EntitySelector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EntitySelector* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EntitySelector* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EntitySelector>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const EntitySelector& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const EntitySelector& from) {
    EntitySelector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(EntitySelector* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.EntitySelector";
  }
  protected:
  explicit EntitySelector(::google::protobuf::Arena* arena);
  EntitySelector(::google::protobuf::Arena* arena, const EntitySelector& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAgencyIdFieldNumber = 1,
    kRouteIdFieldNumber = 2,
    kStopIdFieldNumber = 5,
    kTripFieldNumber = 4,
    kRouteTypeFieldNumber = 3,
  };
  // string agency_id = 1;
  void clear_agency_id() ;
  const std::string& agency_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_agency_id(Arg_&& arg, Args_... args);
  std::string* mutable_agency_id();
  PROTOBUF_NODISCARD std::string* release_agency_id();
  void set_allocated_agency_id(std::string* value);

  private:
  const std::string& _internal_agency_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_agency_id(
      const std::string& value);
  std::string* _internal_mutable_agency_id();

  public:
  // string route_id = 2;
  void clear_route_id() ;
  const std::string& route_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_route_id(Arg_&& arg, Args_... args);
  std::string* mutable_route_id();
  PROTOBUF_NODISCARD std::string* release_route_id();
  void set_allocated_route_id(std::string* value);

  private:
  const std::string& _internal_route_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_route_id(
      const std::string& value);
  std::string* _internal_mutable_route_id();

  public:
  // string stop_id = 5;
  void clear_stop_id() ;
  const std::string& stop_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stop_id(Arg_&& arg, Args_... args);
  std::string* mutable_stop_id();
  PROTOBUF_NODISCARD std::string* release_stop_id();
  void set_allocated_stop_id(std::string* value);

  private:
  const std::string& _internal_stop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stop_id(
      const std::string& value);
  std::string* _internal_mutable_stop_id();

  public:
  // .transit_realtime.TripDescriptor trip = 4;
  bool has_trip() const;
  void clear_trip() ;
  const ::transit_realtime::TripDescriptor& trip() const;
  PROTOBUF_NODISCARD ::transit_realtime::TripDescriptor* release_trip();
  ::transit_realtime::TripDescriptor* mutable_trip();
  void set_allocated_trip(::transit_realtime::TripDescriptor* value);
  void unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor* value);
  ::transit_realtime::TripDescriptor* unsafe_arena_release_trip();

  private:
  const ::transit_realtime::TripDescriptor& _internal_trip() const;
  ::transit_realtime::TripDescriptor* _internal_mutable_trip();

  public:
  // int32 route_type = 3;
  void clear_route_type() ;
  ::int32_t route_type() const;
  void set_route_type(::int32_t value);

  private:
  ::int32_t _internal_route_type() const;
  void _internal_set_route_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.EntitySelector)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 1,
      64, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr agency_id_;
    ::google::protobuf::internal::ArenaStringPtr route_id_;
    ::google::protobuf::internal::ArenaStringPtr stop_id_;
    ::transit_realtime::TripDescriptor* trip_;
    ::int32_t route_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class TripUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.TripUpdate) */ {
 public:
  inline TripUpdate() : TripUpdate(nullptr) {}
  ~TripUpdate() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TripUpdate(::google::protobuf::internal::ConstantInitialized);

  inline TripUpdate(const TripUpdate& from)
      : TripUpdate(nullptr, from) {}
  TripUpdate(TripUpdate&& from) noexcept
    : TripUpdate() {
    *this = ::std::move(from);
  }

  inline TripUpdate& operator=(const TripUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TripUpdate& operator=(TripUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TripUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TripUpdate* internal_default_instance() {
    return reinterpret_cast<const TripUpdate*>(
               &_TripUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TripUpdate& a, TripUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TripUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TripUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TripUpdate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TripUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TripUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TripUpdate& from) {
    TripUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TripUpdate* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.TripUpdate";
  }
  protected:
  explicit TripUpdate(::google::protobuf::Arena* arena);
  TripUpdate(::google::protobuf::Arena* arena, const TripUpdate& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using StopTimeEvent = TripUpdate_StopTimeEvent;
  using StopTimeUpdate = TripUpdate_StopTimeUpdate;

  // accessors -------------------------------------------------------

  enum : int {
    kStopTimeUpdateFieldNumber = 2,
    kTripFieldNumber = 1,
    kVehicleFieldNumber = 3,
    kTimestampFieldNumber = 4,
    kDelayFieldNumber = 5,
  };
  // repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
  int stop_time_update_size() const;
  private:
  int _internal_stop_time_update_size() const;

  public:
  void clear_stop_time_update() ;
  ::transit_realtime::TripUpdate_StopTimeUpdate* mutable_stop_time_update(int index);
  ::google::protobuf::RepeatedPtrField< ::transit_realtime::TripUpdate_StopTimeUpdate >*
      mutable_stop_time_update();
  private:
  const ::google::protobuf::RepeatedPtrField<::transit_realtime::TripUpdate_StopTimeUpdate>& _internal_stop_time_update() const;
  ::google::protobuf::RepeatedPtrField<::transit_realtime::TripUpdate_StopTimeUpdate>* _internal_mutable_stop_time_update();
  public:
  const ::transit_realtime::TripUpdate_StopTimeUpdate& stop_time_update(int index) const;
  ::transit_realtime::TripUpdate_StopTimeUpdate* add_stop_time_update();
  const ::google::protobuf::RepeatedPtrField< ::transit_realtime::TripUpdate_StopTimeUpdate >&
      stop_time_update() const;
  // .transit_realtime.TripDescriptor trip = 1;
  bool has_trip() const;
  void clear_trip() ;
  const ::transit_realtime::TripDescriptor& trip() const;
  PROTOBUF_NODISCARD ::transit_realtime::TripDescriptor* release_trip();
  ::transit_realtime::TripDescriptor* mutable_trip();
  void set_allocated_trip(::transit_realtime::TripDescriptor* value);
  void unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor* value);
  ::transit_realtime::TripDescriptor* unsafe_arena_release_trip();

  private:
  const ::transit_realtime::TripDescriptor& _internal_trip() const;
  ::transit_realtime::TripDescriptor* _internal_mutable_trip();

  public:
  // .transit_realtime.VehicleDescriptor vehicle = 3;
  bool has_vehicle() const;
  void clear_vehicle() ;
  const ::transit_realtime::VehicleDescriptor& vehicle() const;
  PROTOBUF_NODISCARD ::transit_realtime::VehicleDescriptor* release_vehicle();
  ::transit_realtime::VehicleDescriptor* mutable_vehicle();
  void set_allocated_vehicle(::transit_realtime::VehicleDescriptor* value);
  void unsafe_arena_set_allocated_vehicle(::transit_realtime::VehicleDescriptor* value);
  ::transit_realtime::VehicleDescriptor* unsafe_arena_release_vehicle();

  private:
  const ::transit_realtime::VehicleDescriptor& _internal_vehicle() const;
  ::transit_realtime::VehicleDescriptor* _internal_mutable_vehicle();

  public:
  // uint64 timestamp = 4;
  void clear_timestamp() ;
  ::uint64_t timestamp() const;
  void set_timestamp(::uint64_t value);

  private:
  ::uint64_t _internal_timestamp() const;
  void _internal_set_timestamp(::uint64_t value);

  public:
  // int32 delay = 5;
  void clear_delay() ;
  ::int32_t delay() const;
  void set_delay(::int32_t value);

  private:
  ::int32_t _internal_delay() const;
  void _internal_set_delay(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.TripUpdate)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::transit_realtime::TripUpdate_StopTimeUpdate > stop_time_update_;
    ::transit_realtime::TripDescriptor* trip_;
    ::transit_realtime::VehicleDescriptor* vehicle_;
    ::uint64_t timestamp_;
    ::int32_t delay_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class Alert final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.Alert) */ {
 public:
  inline Alert() : Alert(nullptr) {}
  ~Alert() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Alert(::google::protobuf::internal::ConstantInitialized);

  inline Alert(const Alert& from)
      : Alert(nullptr, from) {}
  Alert(Alert&& from) noexcept
    : Alert() {
    *this = ::std::move(from);
  }

  inline Alert& operator=(const Alert& from) {
    CopyFrom(from);
    return *this;
  }
  inline Alert& operator=(Alert&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Alert& default_instance() {
    return *internal_default_instance();
  }
  static inline const Alert* internal_default_instance() {
    return reinterpret_cast<const Alert*>(
               &_Alert_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Alert& a, Alert& b) {
    a.Swap(&b);
  }
  inline void Swap(Alert* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Alert* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Alert* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Alert>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Alert& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Alert& from) {
    Alert::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Alert* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.Alert";
  }
  protected:
  explicit Alert(::google::protobuf::Arena* arena);
  Alert(::google::protobuf::Arena* arena, const Alert& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Cause = Alert_Cause;
  static constexpr Cause PROTO3_DEFAULT_CAUSE = Alert_Cause_PROTO3_DEFAULT_CAUSE;
  static constexpr Cause UNKNOWN_CAUSE = Alert_Cause_UNKNOWN_CAUSE;
  static constexpr Cause OTHER_CAUSE = Alert_Cause_OTHER_CAUSE;
  static constexpr Cause TECHNICAL_PROBLEM = Alert_Cause_TECHNICAL_PROBLEM;
  static constexpr Cause STRIKE = Alert_Cause_STRIKE;
  static constexpr Cause DEMONSTRATION = Alert_Cause_DEMONSTRATION;
  static constexpr Cause ACCIDENT = Alert_Cause_ACCIDENT;
  static constexpr Cause HOLIDAY = Alert_Cause_HOLIDAY;
  static constexpr Cause WEATHER = Alert_Cause_WEATHER;
  static constexpr Cause MAINTENANCE = Alert_Cause_MAINTENANCE;
  static constexpr Cause CONSTRUCTION = Alert_Cause_CONSTRUCTION;
  static constexpr Cause POLICE_ACTIVITY = Alert_Cause_POLICE_ACTIVITY;
  static constexpr Cause MEDICAL_EMERGENCY = Alert_Cause_MEDICAL_EMERGENCY;
  static inline bool Cause_IsValid(int value) {
    return Alert_Cause_IsValid(value);
  }
  static constexpr Cause Cause_MIN = Alert_Cause_Cause_MIN;
  static constexpr Cause Cause_MAX = Alert_Cause_Cause_MAX;
  static constexpr int Cause_ARRAYSIZE = Alert_Cause_Cause_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Cause_descriptor() {
    return Alert_Cause_descriptor();
  }
  template <typename T>
  static inline const std::string& Cause_Name(T value) {
    return Alert_Cause_Name(value);
  }
  static inline bool Cause_Parse(absl::string_view name, Cause* value) {
    return Alert_Cause_Parse(name, value);
  }

  using Effect = Alert_Effect;
  static constexpr Effect PROTO3_DEFAULT_EFFECT = Alert_Effect_PROTO3_DEFAULT_EFFECT;
  static constexpr Effect NO_SERVICE = Alert_Effect_NO_SERVICE;
  static constexpr Effect REDUCED_SERVICE = Alert_Effect_REDUCED_SERVICE;
  static constexpr Effect SIGNIFICANT_DELAYS = Alert_Effect_SIGNIFICANT_DELAYS;
  static constexpr Effect DETOUR = Alert_Effect_DETOUR;
  static constexpr Effect ADDITIONAL_SERVICE = Alert_Effect_ADDITIONAL_SERVICE;
  static constexpr Effect MODIFIED_SERVICE = Alert_Effect_MODIFIED_SERVICE;
  static constexpr Effect OTHER_EFFECT = Alert_Effect_OTHER_EFFECT;
  static constexpr Effect UNKNOWN_EFFECT = Alert_Effect_UNKNOWN_EFFECT;
  static constexpr Effect STOP_MOVED = Alert_Effect_STOP_MOVED;
  static inline bool Effect_IsValid(int value) {
    return Alert_Effect_IsValid(value);
  }
  static constexpr Effect Effect_MIN = Alert_Effect_Effect_MIN;
  static constexpr Effect Effect_MAX = Alert_Effect_Effect_MAX;
  static constexpr int Effect_ARRAYSIZE = Alert_Effect_Effect_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Effect_descriptor() {
    return Alert_Effect_descriptor();
  }
  template <typename T>
  static inline const std::string& Effect_Name(T value) {
    return Alert_Effect_Name(value);
  }
  static inline bool Effect_Parse(absl::string_view name, Effect* value) {
    return Alert_Effect_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kActivePeriodFieldNumber = 1,
    kInformedEntityFieldNumber = 5,
    kUrlFieldNumber = 8,
    kHeaderTextFieldNumber = 10,
    kDescriptionTextFieldNumber = 11,
    kCauseFieldNumber = 6,
    kEffectFieldNumber = 7,
  };
  // repeated .transit_realtime.TimeRange active_period = 1;
  int active_period_size() const;
  private:
  int _internal_active_period_size() const;

  public:
  void clear_active_period() ;
  ::transit_realtime::TimeRange* mutable_active_period(int index);
  ::google::protobuf::RepeatedPtrField< ::transit_realtime::TimeRange >*
      mutable_active_period();
  private:
  const ::google::protobuf::RepeatedPtrField<::transit_realtime::TimeRange>& _internal_active_period() const;
  ::google::protobuf::RepeatedPtrField<::transit_realtime::TimeRange>* _internal_mutable_active_period();
  public:
  const ::transit_realtime::TimeRange& active_period(int index) const;
  ::transit_realtime::TimeRange* add_active_period();
  const ::google::protobuf::RepeatedPtrField< ::transit_realtime::TimeRange >&
      active_period() const;
  // repeated .transit_realtime.EntitySelector informed_entity = 5;
  int informed_entity_size() const;
  private:
  int _internal_informed_entity_size() const;

  public:
  void clear_informed_entity() ;
  ::transit_realtime::EntitySelector* mutable_informed_entity(int index);
  ::google::protobuf::RepeatedPtrField< ::transit_realtime::EntitySelector >*
      mutable_informed_entity();
  private:
  const ::google::protobuf::RepeatedPtrField<::transit_realtime::EntitySelector>& _internal_informed_entity() const;
  ::google::protobuf::RepeatedPtrField<::transit_realtime::EntitySelector>* _internal_mutable_informed_entity();
  public:
  const ::transit_realtime::EntitySelector& informed_entity(int index) const;
  ::transit_realtime::EntitySelector* add_informed_entity();
  const ::google::protobuf::RepeatedPtrField< ::transit_realtime::EntitySelector >&
      informed_entity() const;
  // .transit_realtime.TranslatedString url = 8;
  bool has_url() const;
  void clear_url() ;
  const ::transit_realtime::TranslatedString& url() const;
  PROTOBUF_NODISCARD ::transit_realtime::TranslatedString* release_url();
  ::transit_realtime::TranslatedString* mutable_url();
  void set_allocated_url(::transit_realtime::TranslatedString* value);
  void unsafe_arena_set_allocated_url(::transit_realtime::TranslatedString* value);
  ::transit_realtime::TranslatedString* unsafe_arena_release_url();

  private:
  const ::transit_realtime::TranslatedString& _internal_url() const;
  ::transit_realtime::TranslatedString* _internal_mutable_url();

  public:
  // .transit_realtime.TranslatedString header_text = 10;
  bool has_header_text() const;
  void clear_header_text() ;
  const ::transit_realtime::TranslatedString& header_text() const;
  PROTOBUF_NODISCARD ::transit_realtime::TranslatedString* release_header_text();
  ::transit_realtime::TranslatedString* mutable_header_text();
  void set_allocated_header_text(::transit_realtime::TranslatedString* value);
  void unsafe_arena_set_allocated_header_text(::transit_realtime::TranslatedString* value);
  ::transit_realtime::TranslatedString* unsafe_arena_release_header_text();

  private:
  const ::transit_realtime::TranslatedString& _internal_header_text() const;
  ::transit_realtime::TranslatedString* _internal_mutable_header_text();

  public:
  // .transit_realtime.TranslatedString description_text = 11;
  bool has_description_text() const;
  void clear_description_text() ;
  const ::transit_realtime::TranslatedString& description_text() const;
  PROTOBUF_NODISCARD ::transit_realtime::TranslatedString* release_description_text();
  ::transit_realtime::TranslatedString* mutable_description_text();
  void set_allocated_description_text(::transit_realtime::TranslatedString* value);
  void unsafe_arena_set_allocated_description_text(::transit_realtime::TranslatedString* value);
  ::transit_realtime::TranslatedString* unsafe_arena_release_description_text();

  private:
  const ::transit_realtime::TranslatedString& _internal_description_text() const;
  ::transit_realtime::TranslatedString* _internal_mutable_description_text();

  public:
  // .transit_realtime.Alert.Cause cause = 6;
  void clear_cause() ;
  ::transit_realtime::Alert_Cause cause() const;
  void set_cause(::transit_realtime::Alert_Cause value);

  private:
  ::transit_realtime::Alert_Cause _internal_cause() const;
  void _internal_set_cause(::transit_realtime::Alert_Cause value);

  public:
  // .transit_realtime.Alert.Effect effect = 7;
  void clear_effect() ;
  ::transit_realtime::Alert_Effect effect() const;
  void set_effect(::transit_realtime::Alert_Effect value);

  private:
  ::transit_realtime::Alert_Effect _internal_effect() const;
  void _internal_set_effect(::transit_realtime::Alert_Effect value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.Alert)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 5,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::transit_realtime::TimeRange > active_period_;
    ::google::protobuf::RepeatedPtrField< ::transit_realtime::EntitySelector > informed_entity_;
    ::transit_realtime::TranslatedString* url_;
    ::transit_realtime::TranslatedString* header_text_;
    ::transit_realtime::TranslatedString* description_text_;
    int cause_;
    int effect_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class FeedEntity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.FeedEntity) */ {
 public:
  inline FeedEntity() : FeedEntity(nullptr) {}
  ~FeedEntity() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeedEntity(::google::protobuf::internal::ConstantInitialized);

  inline FeedEntity(const FeedEntity& from)
      : FeedEntity(nullptr, from) {}
  FeedEntity(FeedEntity&& from) noexcept
    : FeedEntity() {
    *this = ::std::move(from);
  }

  inline FeedEntity& operator=(const FeedEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedEntity& operator=(FeedEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedEntity* internal_default_instance() {
    return reinterpret_cast<const FeedEntity*>(
               &_FeedEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FeedEntity& a, FeedEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedEntity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedEntity* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedEntity* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedEntity>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FeedEntity& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FeedEntity& from) {
    FeedEntity::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FeedEntity* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.FeedEntity";
  }
  protected:
  explicit FeedEntity(::google::protobuf::Arena* arena);
  FeedEntity(::google::protobuf::Arena* arena, const FeedEntity& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTripUpdateFieldNumber = 3,
    kVehicleFieldNumber = 4,
    kAlertFieldNumber = 5,
    kIsDeletedFieldNumber = 2,
  };
  // string id = 1;
  void clear_id() ;
  const std::string& id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_id(Arg_&& arg, Args_... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* value);

  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(
      const std::string& value);
  std::string* _internal_mutable_id();

  public:
  // .transit_realtime.TripUpdate trip_update = 3;
  bool has_trip_update() const;
  void clear_trip_update() ;
  const ::transit_realtime::TripUpdate& trip_update() const;
  PROTOBUF_NODISCARD ::transit_realtime::TripUpdate* release_trip_update();
  ::transit_realtime::TripUpdate* mutable_trip_update();
  void set_allocated_trip_update(::transit_realtime::TripUpdate* value);
  void unsafe_arena_set_allocated_trip_update(::transit_realtime::TripUpdate* value);
  ::transit_realtime::TripUpdate* unsafe_arena_release_trip_update();

  private:
  const ::transit_realtime::TripUpdate& _internal_trip_update() const;
  ::transit_realtime::TripUpdate* _internal_mutable_trip_update();

  public:
  // .transit_realtime.VehiclePosition vehicle = 4;
  bool has_vehicle() const;
  void clear_vehicle() ;
  const ::transit_realtime::VehiclePosition& vehicle() const;
  PROTOBUF_NODISCARD ::transit_realtime::VehiclePosition* release_vehicle();
  ::transit_realtime::VehiclePosition* mutable_vehicle();
  void set_allocated_vehicle(::transit_realtime::VehiclePosition* value);
  void unsafe_arena_set_allocated_vehicle(::transit_realtime::VehiclePosition* value);
  ::transit_realtime::VehiclePosition* unsafe_arena_release_vehicle();

  private:
  const ::transit_realtime::VehiclePosition& _internal_vehicle() const;
  ::transit_realtime::VehiclePosition* _internal_mutable_vehicle();

  public:
  // .transit_realtime.Alert alert = 5;
  bool has_alert() const;
  void clear_alert() ;
  const ::transit_realtime::Alert& alert() const;
  PROTOBUF_NODISCARD ::transit_realtime::Alert* release_alert();
  ::transit_realtime::Alert* mutable_alert();
  void set_allocated_alert(::transit_realtime::Alert* value);
  void unsafe_arena_set_allocated_alert(::transit_realtime::Alert* value);
  ::transit_realtime::Alert* unsafe_arena_release_alert();

  private:
  const ::transit_realtime::Alert& _internal_alert() const;
  ::transit_realtime::Alert* _internal_mutable_alert();

  public:
  // bool is_deleted = 2;
  void clear_is_deleted() ;
  bool is_deleted() const;
  void set_is_deleted(bool value);

  private:
  bool _internal_is_deleted() const;
  void _internal_set_is_deleted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.FeedEntity)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      38, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr id_;
    ::transit_realtime::TripUpdate* trip_update_;
    ::transit_realtime::VehiclePosition* vehicle_;
    ::transit_realtime::Alert* alert_;
    bool is_deleted_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};// -------------------------------------------------------------------

class FeedMessage final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:transit_realtime.FeedMessage) */ {
 public:
  inline FeedMessage() : FeedMessage(nullptr) {}
  ~FeedMessage() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR FeedMessage(::google::protobuf::internal::ConstantInitialized);

  inline FeedMessage(const FeedMessage& from)
      : FeedMessage(nullptr, from) {}
  FeedMessage(FeedMessage&& from) noexcept
    : FeedMessage() {
    *this = ::std::move(from);
  }

  inline FeedMessage& operator=(const FeedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline FeedMessage& operator=(FeedMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FeedMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const FeedMessage* internal_default_instance() {
    return reinterpret_cast<const FeedMessage*>(
               &_FeedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FeedMessage& a, FeedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(FeedMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FeedMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FeedMessage* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FeedMessage>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const FeedMessage& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const FeedMessage& from) {
    FeedMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(FeedMessage* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "transit_realtime.FeedMessage";
  }
  protected:
  explicit FeedMessage(::google::protobuf::Arena* arena);
  FeedMessage(::google::protobuf::Arena* arena, const FeedMessage& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .transit_realtime.FeedEntity entity = 2;
  int entity_size() const;
  private:
  int _internal_entity_size() const;

  public:
  void clear_entity() ;
  ::transit_realtime::FeedEntity* mutable_entity(int index);
  ::google::protobuf::RepeatedPtrField< ::transit_realtime::FeedEntity >*
      mutable_entity();
  private:
  const ::google::protobuf::RepeatedPtrField<::transit_realtime::FeedEntity>& _internal_entity() const;
  ::google::protobuf::RepeatedPtrField<::transit_realtime::FeedEntity>* _internal_mutable_entity();
  public:
  const ::transit_realtime::FeedEntity& entity(int index) const;
  ::transit_realtime::FeedEntity* add_entity();
  const ::google::protobuf::RepeatedPtrField< ::transit_realtime::FeedEntity >&
      entity() const;
  // .transit_realtime.FeedHeader header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::transit_realtime::FeedHeader& header() const;
  PROTOBUF_NODISCARD ::transit_realtime::FeedHeader* release_header();
  ::transit_realtime::FeedHeader* mutable_header();
  void set_allocated_header(::transit_realtime::FeedHeader* value);
  void unsafe_arena_set_allocated_header(::transit_realtime::FeedHeader* value);
  ::transit_realtime::FeedHeader* unsafe_arena_release_header();

  private:
  const ::transit_realtime::FeedHeader& _internal_header() const;
  ::transit_realtime::FeedHeader* _internal_mutable_header();

  public:
  // @@protoc_insertion_point(class_scope:transit_realtime.FeedMessage)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::transit_realtime::FeedEntity > entity_;
    ::transit_realtime::FeedHeader* header_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_gtfs_2drealtime_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// FeedMessage

// .transit_realtime.FeedHeader header = 1;
inline bool FeedMessage::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void FeedMessage::clear_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::FeedHeader& FeedMessage::_internal_header() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::FeedHeader* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::FeedHeader&>(::transit_realtime::_FeedHeader_default_instance_);
}
inline const ::transit_realtime::FeedHeader& FeedMessage::header() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedMessage.header)
  return _internal_header();
}
inline void FeedMessage::unsafe_arena_set_allocated_header(::transit_realtime::FeedHeader* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = reinterpret_cast<::transit_realtime::FeedHeader*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedMessage.header)
}
inline ::transit_realtime::FeedHeader* FeedMessage::release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::FeedHeader* released = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::FeedHeader* FeedMessage::unsafe_arena_release_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.FeedMessage.header)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::FeedHeader* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::transit_realtime::FeedHeader* FeedMessage::_internal_mutable_header() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::FeedHeader>(GetArena());
    _impl_.header_ = reinterpret_cast<::transit_realtime::FeedHeader*>(p);
  }
  return _impl_.header_;
}
inline ::transit_realtime::FeedHeader* FeedMessage::mutable_header() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::FeedHeader* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedMessage.header)
  return _msg;
}
inline void FeedMessage::set_allocated_header(::transit_realtime::FeedHeader* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::FeedHeader*>(_impl_.header_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::FeedHeader*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.header_ = reinterpret_cast<::transit_realtime::FeedHeader*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedMessage.header)
}

// repeated .transit_realtime.FeedEntity entity = 2;
inline int FeedMessage::_internal_entity_size() const {
  return _internal_entity().size();
}
inline int FeedMessage::entity_size() const {
  return _internal_entity_size();
}
inline void FeedMessage::clear_entity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.entity_.Clear();
}
inline ::transit_realtime::FeedEntity* FeedMessage::mutable_entity(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedMessage.entity)
  return _internal_mutable_entity()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::FeedEntity>* FeedMessage::mutable_entity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.FeedMessage.entity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_entity();
}
inline const ::transit_realtime::FeedEntity& FeedMessage::entity(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedMessage.entity)
  return _internal_entity().Get(index);
}
inline ::transit_realtime::FeedEntity* FeedMessage::add_entity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::transit_realtime::FeedEntity* _add = _internal_mutable_entity()->Add();
  // @@protoc_insertion_point(field_add:transit_realtime.FeedMessage.entity)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::FeedEntity>& FeedMessage::entity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:transit_realtime.FeedMessage.entity)
  return _internal_entity();
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::FeedEntity>&
FeedMessage::_internal_entity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.entity_;
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::FeedEntity>*
FeedMessage::_internal_mutable_entity() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.entity_;
}

// -------------------------------------------------------------------

// FeedHeader

// string gtfs_realtime_version = 1;
inline void FeedHeader::clear_gtfs_realtime_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gtfs_realtime_version_.ClearToEmpty();
}
inline const std::string& FeedHeader::gtfs_realtime_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.gtfs_realtime_version)
  return _internal_gtfs_realtime_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeedHeader::set_gtfs_realtime_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gtfs_realtime_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.gtfs_realtime_version)
}
inline std::string* FeedHeader::mutable_gtfs_realtime_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_gtfs_realtime_version();
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedHeader.gtfs_realtime_version)
  return _s;
}
inline const std::string& FeedHeader::_internal_gtfs_realtime_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.gtfs_realtime_version_.Get();
}
inline void FeedHeader::_internal_set_gtfs_realtime_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.gtfs_realtime_version_.Set(value, GetArena());
}
inline std::string* FeedHeader::_internal_mutable_gtfs_realtime_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.gtfs_realtime_version_.Mutable( GetArena());
}
inline std::string* FeedHeader::release_gtfs_realtime_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.FeedHeader.gtfs_realtime_version)
  return _impl_.gtfs_realtime_version_.Release();
}
inline void FeedHeader::set_allocated_gtfs_realtime_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.gtfs_realtime_version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gtfs_realtime_version_.IsDefault()) {
          _impl_.gtfs_realtime_version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedHeader.gtfs_realtime_version)
}

// .transit_realtime.FeedHeader.Incrementality incrementality = 2;
inline void FeedHeader::clear_incrementality() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.incrementality_ = 0;
}
inline ::transit_realtime::FeedHeader_Incrementality FeedHeader::incrementality() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.incrementality)
  return _internal_incrementality();
}
inline void FeedHeader::set_incrementality(::transit_realtime::FeedHeader_Incrementality value) {
  _internal_set_incrementality(value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.incrementality)
}
inline ::transit_realtime::FeedHeader_Incrementality FeedHeader::_internal_incrementality() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transit_realtime::FeedHeader_Incrementality>(_impl_.incrementality_);
}
inline void FeedHeader::_internal_set_incrementality(::transit_realtime::FeedHeader_Incrementality value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.incrementality_ = value;
}

// uint64 timestamp = 3;
inline void FeedHeader::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t FeedHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedHeader.timestamp)
  return _internal_timestamp();
}
inline void FeedHeader::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedHeader.timestamp)
}
inline ::uint64_t FeedHeader::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void FeedHeader::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// -------------------------------------------------------------------

// FeedEntity

// string id = 1;
inline void FeedEntity::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& FeedEntity::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void FeedEntity::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.FeedEntity.id)
}
inline std::string* FeedEntity::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.id)
  return _s;
}
inline const std::string& FeedEntity::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void FeedEntity::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* FeedEntity::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* FeedEntity::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.id)
  return _impl_.id_.Release();
}
inline void FeedEntity::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.id)
}

// bool is_deleted = 2;
inline void FeedEntity::clear_is_deleted() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_deleted_ = false;
}
inline bool FeedEntity::is_deleted() const {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.is_deleted)
  return _internal_is_deleted();
}
inline void FeedEntity::set_is_deleted(bool value) {
  _internal_set_is_deleted(value);
  // @@protoc_insertion_point(field_set:transit_realtime.FeedEntity.is_deleted)
}
inline bool FeedEntity::_internal_is_deleted() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_deleted_;
}
inline void FeedEntity::_internal_set_is_deleted(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_deleted_ = value;
}

// .transit_realtime.TripUpdate trip_update = 3;
inline bool FeedEntity::has_trip_update() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trip_update_ != nullptr);
  return value;
}
inline void FeedEntity::clear_trip_update() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.trip_update_ != nullptr) _impl_.trip_update_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::TripUpdate& FeedEntity::_internal_trip_update() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TripUpdate* p = _impl_.trip_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TripUpdate&>(::transit_realtime::_TripUpdate_default_instance_);
}
inline const ::transit_realtime::TripUpdate& FeedEntity::trip_update() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.trip_update)
  return _internal_trip_update();
}
inline void FeedEntity::unsafe_arena_set_allocated_trip_update(::transit_realtime::TripUpdate* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trip_update_);
  }
  _impl_.trip_update_ = reinterpret_cast<::transit_realtime::TripUpdate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.trip_update)
}
inline ::transit_realtime::TripUpdate* FeedEntity::release_trip_update() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripUpdate* released = _impl_.trip_update_;
  _impl_.trip_update_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TripUpdate* FeedEntity::unsafe_arena_release_trip_update() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.trip_update)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripUpdate* temp = _impl_.trip_update_;
  _impl_.trip_update_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripUpdate* FeedEntity::_internal_mutable_trip_update() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.trip_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TripUpdate>(GetArena());
    _impl_.trip_update_ = reinterpret_cast<::transit_realtime::TripUpdate*>(p);
  }
  return _impl_.trip_update_;
}
inline ::transit_realtime::TripUpdate* FeedEntity::mutable_trip_update() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TripUpdate* _msg = _internal_mutable_trip_update();
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.trip_update)
  return _msg;
}
inline void FeedEntity::set_allocated_trip_update(::transit_realtime::TripUpdate* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TripUpdate*>(_impl_.trip_update_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TripUpdate*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.trip_update_ = reinterpret_cast<::transit_realtime::TripUpdate*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.trip_update)
}

// .transit_realtime.VehiclePosition vehicle = 4;
inline bool FeedEntity::has_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_ != nullptr);
  return value;
}
inline void FeedEntity::clear_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vehicle_ != nullptr) _impl_.vehicle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::VehiclePosition& FeedEntity::_internal_vehicle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::VehiclePosition* p = _impl_.vehicle_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::VehiclePosition&>(::transit_realtime::_VehiclePosition_default_instance_);
}
inline const ::transit_realtime::VehiclePosition& FeedEntity::vehicle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.vehicle)
  return _internal_vehicle();
}
inline void FeedEntity::unsafe_arena_set_allocated_vehicle(::transit_realtime::VehiclePosition* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_);
  }
  _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehiclePosition*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.vehicle)
}
inline ::transit_realtime::VehiclePosition* FeedEntity::release_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::VehiclePosition* released = _impl_.vehicle_;
  _impl_.vehicle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::VehiclePosition* FeedEntity::unsafe_arena_release_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.vehicle)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::VehiclePosition* temp = _impl_.vehicle_;
  _impl_.vehicle_ = nullptr;
  return temp;
}
inline ::transit_realtime::VehiclePosition* FeedEntity::_internal_mutable_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vehicle_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::VehiclePosition>(GetArena());
    _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehiclePosition*>(p);
  }
  return _impl_.vehicle_;
}
inline ::transit_realtime::VehiclePosition* FeedEntity::mutable_vehicle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::VehiclePosition* _msg = _internal_mutable_vehicle();
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.vehicle)
  return _msg;
}
inline void FeedEntity::set_allocated_vehicle(::transit_realtime::VehiclePosition* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::VehiclePosition*>(_impl_.vehicle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::VehiclePosition*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehiclePosition*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.vehicle)
}

// .transit_realtime.Alert alert = 5;
inline bool FeedEntity::has_alert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alert_ != nullptr);
  return value;
}
inline void FeedEntity::clear_alert() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.alert_ != nullptr) _impl_.alert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::Alert& FeedEntity::_internal_alert() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::Alert* p = _impl_.alert_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::Alert&>(::transit_realtime::_Alert_default_instance_);
}
inline const ::transit_realtime::Alert& FeedEntity::alert() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.FeedEntity.alert)
  return _internal_alert();
}
inline void FeedEntity::unsafe_arena_set_allocated_alert(::transit_realtime::Alert* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.alert_);
  }
  _impl_.alert_ = reinterpret_cast<::transit_realtime::Alert*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.FeedEntity.alert)
}
inline ::transit_realtime::Alert* FeedEntity::release_alert() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::Alert* released = _impl_.alert_;
  _impl_.alert_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::Alert* FeedEntity::unsafe_arena_release_alert() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.FeedEntity.alert)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::Alert* temp = _impl_.alert_;
  _impl_.alert_ = nullptr;
  return temp;
}
inline ::transit_realtime::Alert* FeedEntity::_internal_mutable_alert() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.alert_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::Alert>(GetArena());
    _impl_.alert_ = reinterpret_cast<::transit_realtime::Alert*>(p);
  }
  return _impl_.alert_;
}
inline ::transit_realtime::Alert* FeedEntity::mutable_alert() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::Alert* _msg = _internal_mutable_alert();
  // @@protoc_insertion_point(field_mutable:transit_realtime.FeedEntity.alert)
  return _msg;
}
inline void FeedEntity::set_allocated_alert(::transit_realtime::Alert* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::Alert*>(_impl_.alert_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::Alert*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.alert_ = reinterpret_cast<::transit_realtime::Alert*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.FeedEntity.alert)
}

// -------------------------------------------------------------------

// TripUpdate_StopTimeEvent

// int32 delay = 1;
inline void TripUpdate_StopTimeEvent::clear_delay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delay_ = 0;
}
inline ::int32_t TripUpdate_StopTimeEvent::delay() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.delay)
  return _internal_delay();
}
inline void TripUpdate_StopTimeEvent::set_delay(::int32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.delay)
}
inline ::int32_t TripUpdate_StopTimeEvent::_internal_delay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delay_;
}
inline void TripUpdate_StopTimeEvent::_internal_set_delay(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delay_ = value;
}

// int64 time = 2;
inline void TripUpdate_StopTimeEvent::clear_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_ = ::int64_t{0};
}
inline ::int64_t TripUpdate_StopTimeEvent::time() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.time)
  return _internal_time();
}
inline void TripUpdate_StopTimeEvent::set_time(::int64_t value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.time)
}
inline ::int64_t TripUpdate_StopTimeEvent::_internal_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_;
}
inline void TripUpdate_StopTimeEvent::_internal_set_time(::int64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_ = value;
}

// int32 uncertainty = 3;
inline void TripUpdate_StopTimeEvent::clear_uncertainty() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.uncertainty_ = 0;
}
inline ::int32_t TripUpdate_StopTimeEvent::uncertainty() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeEvent.uncertainty)
  return _internal_uncertainty();
}
inline void TripUpdate_StopTimeEvent::set_uncertainty(::int32_t value) {
  _internal_set_uncertainty(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeEvent.uncertainty)
}
inline ::int32_t TripUpdate_StopTimeEvent::_internal_uncertainty() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.uncertainty_;
}
inline void TripUpdate_StopTimeEvent::_internal_set_uncertainty(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.uncertainty_ = value;
}

// -------------------------------------------------------------------

// TripUpdate_StopTimeUpdate

// uint32 stop_sequence = 1;
inline void TripUpdate_StopTimeUpdate::clear_stop_sequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_sequence_ = 0u;
}
inline ::uint32_t TripUpdate_StopTimeUpdate::stop_sequence() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.stop_sequence)
  return _internal_stop_sequence();
}
inline void TripUpdate_StopTimeUpdate::set_stop_sequence(::uint32_t value) {
  _internal_set_stop_sequence(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.stop_sequence)
}
inline ::uint32_t TripUpdate_StopTimeUpdate::_internal_stop_sequence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stop_sequence_;
}
inline void TripUpdate_StopTimeUpdate::_internal_set_stop_sequence(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stop_sequence_ = value;
}

// string stop_id = 4;
inline void TripUpdate_StopTimeUpdate::clear_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_id_.ClearToEmpty();
}
inline const std::string& TripUpdate_StopTimeUpdate::stop_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  return _internal_stop_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TripUpdate_StopTimeUpdate::set_stop_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stop_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}
inline std::string* TripUpdate_StopTimeUpdate::mutable_stop_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stop_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  return _s;
}
inline const std::string& TripUpdate_StopTimeUpdate::_internal_stop_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stop_id_.Get();
}
inline void TripUpdate_StopTimeUpdate::_internal_set_stop_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stop_id_.Set(value, GetArena());
}
inline std::string* TripUpdate_StopTimeUpdate::_internal_mutable_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.stop_id_.Mutable( GetArena());
}
inline std::string* TripUpdate_StopTimeUpdate::release_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
  return _impl_.stop_id_.Release();
}
inline void TripUpdate_StopTimeUpdate::set_allocated_stop_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stop_id_.IsDefault()) {
          _impl_.stop_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.stop_id)
}

// .transit_realtime.TripUpdate.StopTimeEvent arrival = 2;
inline bool TripUpdate_StopTimeUpdate::has_arrival() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.arrival_ != nullptr);
  return value;
}
inline void TripUpdate_StopTimeUpdate::clear_arrival() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.arrival_ != nullptr) _impl_.arrival_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::TripUpdate_StopTimeEvent& TripUpdate_StopTimeUpdate::_internal_arrival() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TripUpdate_StopTimeEvent* p = _impl_.arrival_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TripUpdate_StopTimeEvent&>(::transit_realtime::_TripUpdate_StopTimeEvent_default_instance_);
}
inline const ::transit_realtime::TripUpdate_StopTimeEvent& TripUpdate_StopTimeUpdate::arrival() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
  return _internal_arrival();
}
inline void TripUpdate_StopTimeUpdate::unsafe_arena_set_allocated_arrival(::transit_realtime::TripUpdate_StopTimeEvent* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.arrival_);
  }
  _impl_.arrival_ = reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
}
inline ::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::release_arrival() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripUpdate_StopTimeEvent* released = _impl_.arrival_;
  _impl_.arrival_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::unsafe_arena_release_arrival() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.arrival)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripUpdate_StopTimeEvent* temp = _impl_.arrival_;
  _impl_.arrival_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::_internal_mutable_arrival() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.arrival_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TripUpdate_StopTimeEvent>(GetArena());
    _impl_.arrival_ = reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(p);
  }
  return _impl_.arrival_;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::mutable_arrival() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TripUpdate_StopTimeEvent* _msg = _internal_mutable_arrival();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
  return _msg;
}
inline void TripUpdate_StopTimeUpdate::set_allocated_arrival(::transit_realtime::TripUpdate_StopTimeEvent* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(_impl_.arrival_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.arrival_ = reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.arrival)
}

// .transit_realtime.TripUpdate.StopTimeEvent departure = 3;
inline bool TripUpdate_StopTimeUpdate::has_departure() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.departure_ != nullptr);
  return value;
}
inline void TripUpdate_StopTimeUpdate::clear_departure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.departure_ != nullptr) _impl_.departure_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::TripUpdate_StopTimeEvent& TripUpdate_StopTimeUpdate::_internal_departure() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TripUpdate_StopTimeEvent* p = _impl_.departure_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TripUpdate_StopTimeEvent&>(::transit_realtime::_TripUpdate_StopTimeEvent_default_instance_);
}
inline const ::transit_realtime::TripUpdate_StopTimeEvent& TripUpdate_StopTimeUpdate::departure() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.departure)
  return _internal_departure();
}
inline void TripUpdate_StopTimeUpdate::unsafe_arena_set_allocated_departure(::transit_realtime::TripUpdate_StopTimeEvent* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.departure_);
  }
  _impl_.departure_ = reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.departure)
}
inline ::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::release_departure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TripUpdate_StopTimeEvent* released = _impl_.departure_;
  _impl_.departure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::unsafe_arena_release_departure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.StopTimeUpdate.departure)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TripUpdate_StopTimeEvent* temp = _impl_.departure_;
  _impl_.departure_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::_internal_mutable_departure() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.departure_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TripUpdate_StopTimeEvent>(GetArena());
    _impl_.departure_ = reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(p);
  }
  return _impl_.departure_;
}
inline ::transit_realtime::TripUpdate_StopTimeEvent* TripUpdate_StopTimeUpdate::mutable_departure() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TripUpdate_StopTimeEvent* _msg = _internal_mutable_departure();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.StopTimeUpdate.departure)
  return _msg;
}
inline void TripUpdate_StopTimeUpdate::set_allocated_departure(::transit_realtime::TripUpdate_StopTimeEvent* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(_impl_.departure_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.departure_ = reinterpret_cast<::transit_realtime::TripUpdate_StopTimeEvent*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.StopTimeUpdate.departure)
}

// .transit_realtime.TripUpdate.StopTimeUpdate.ScheduleRelationship schedule_relationship = 5;
inline void TripUpdate_StopTimeUpdate::clear_schedule_relationship() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schedule_relationship_ = 0;
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::schedule_relationship() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.StopTimeUpdate.schedule_relationship)
  return _internal_schedule_relationship();
}
inline void TripUpdate_StopTimeUpdate::set_schedule_relationship(::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value) {
  _internal_set_schedule_relationship(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.StopTimeUpdate.schedule_relationship)
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship TripUpdate_StopTimeUpdate::_internal_schedule_relationship() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship>(_impl_.schedule_relationship_);
}
inline void TripUpdate_StopTimeUpdate::_internal_set_schedule_relationship(::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.schedule_relationship_ = value;
}

// -------------------------------------------------------------------

// TripUpdate

// .transit_realtime.TripDescriptor trip = 1;
inline bool TripUpdate::has_trip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trip_ != nullptr);
  return value;
}
inline void TripUpdate::clear_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.trip_ != nullptr) _impl_.trip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::TripDescriptor& TripUpdate::_internal_trip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TripDescriptor* p = _impl_.trip_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TripDescriptor&>(::transit_realtime::_TripDescriptor_default_instance_);
}
inline const ::transit_realtime::TripDescriptor& TripUpdate::trip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.trip)
  return _internal_trip();
}
inline void TripUpdate::unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trip_);
  }
  _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.trip)
}
inline ::transit_realtime::TripDescriptor* TripUpdate::release_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripDescriptor* released = _impl_.trip_;
  _impl_.trip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TripDescriptor* TripUpdate::unsafe_arena_release_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.trip)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripDescriptor* temp = _impl_.trip_;
  _impl_.trip_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripDescriptor* TripUpdate::_internal_mutable_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.trip_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TripDescriptor>(GetArena());
    _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(p);
  }
  return _impl_.trip_;
}
inline ::transit_realtime::TripDescriptor* TripUpdate::mutable_trip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TripDescriptor* _msg = _internal_mutable_trip();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.trip)
  return _msg;
}
inline void TripUpdate::set_allocated_trip(::transit_realtime::TripDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TripDescriptor*>(_impl_.trip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TripDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.trip)
}

// .transit_realtime.VehicleDescriptor vehicle = 3;
inline bool TripUpdate::has_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_ != nullptr);
  return value;
}
inline void TripUpdate::clear_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vehicle_ != nullptr) _impl_.vehicle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::VehicleDescriptor& TripUpdate::_internal_vehicle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::VehicleDescriptor* p = _impl_.vehicle_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::VehicleDescriptor&>(::transit_realtime::_VehicleDescriptor_default_instance_);
}
inline const ::transit_realtime::VehicleDescriptor& TripUpdate::vehicle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.vehicle)
  return _internal_vehicle();
}
inline void TripUpdate::unsafe_arena_set_allocated_vehicle(::transit_realtime::VehicleDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_);
  }
  _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehicleDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.TripUpdate.vehicle)
}
inline ::transit_realtime::VehicleDescriptor* TripUpdate::release_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::VehicleDescriptor* released = _impl_.vehicle_;
  _impl_.vehicle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::VehicleDescriptor* TripUpdate::unsafe_arena_release_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripUpdate.vehicle)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::VehicleDescriptor* temp = _impl_.vehicle_;
  _impl_.vehicle_ = nullptr;
  return temp;
}
inline ::transit_realtime::VehicleDescriptor* TripUpdate::_internal_mutable_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vehicle_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::VehicleDescriptor>(GetArena());
    _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehicleDescriptor*>(p);
  }
  return _impl_.vehicle_;
}
inline ::transit_realtime::VehicleDescriptor* TripUpdate::mutable_vehicle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::VehicleDescriptor* _msg = _internal_mutable_vehicle();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.vehicle)
  return _msg;
}
inline void TripUpdate::set_allocated_vehicle(::transit_realtime::VehicleDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::VehicleDescriptor*>(_impl_.vehicle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::VehicleDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehicleDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripUpdate.vehicle)
}

// repeated .transit_realtime.TripUpdate.StopTimeUpdate stop_time_update = 2;
inline int TripUpdate::_internal_stop_time_update_size() const {
  return _internal_stop_time_update().size();
}
inline int TripUpdate::stop_time_update_size() const {
  return _internal_stop_time_update_size();
}
inline void TripUpdate::clear_stop_time_update() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_time_update_.Clear();
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate* TripUpdate::mutable_stop_time_update(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripUpdate.stop_time_update)
  return _internal_mutable_stop_time_update()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::TripUpdate_StopTimeUpdate>* TripUpdate::mutable_stop_time_update()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TripUpdate.stop_time_update)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_stop_time_update();
}
inline const ::transit_realtime::TripUpdate_StopTimeUpdate& TripUpdate::stop_time_update(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.stop_time_update)
  return _internal_stop_time_update().Get(index);
}
inline ::transit_realtime::TripUpdate_StopTimeUpdate* TripUpdate::add_stop_time_update() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::transit_realtime::TripUpdate_StopTimeUpdate* _add = _internal_mutable_stop_time_update()->Add();
  // @@protoc_insertion_point(field_add:transit_realtime.TripUpdate.stop_time_update)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::TripUpdate_StopTimeUpdate>& TripUpdate::stop_time_update() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:transit_realtime.TripUpdate.stop_time_update)
  return _internal_stop_time_update();
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::TripUpdate_StopTimeUpdate>&
TripUpdate::_internal_stop_time_update() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stop_time_update_;
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::TripUpdate_StopTimeUpdate>*
TripUpdate::_internal_mutable_stop_time_update() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.stop_time_update_;
}

// uint64 timestamp = 4;
inline void TripUpdate::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t TripUpdate::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.timestamp)
  return _internal_timestamp();
}
inline void TripUpdate::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.timestamp)
}
inline ::uint64_t TripUpdate::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void TripUpdate::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// int32 delay = 5;
inline void TripUpdate::clear_delay() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.delay_ = 0;
}
inline ::int32_t TripUpdate::delay() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripUpdate.delay)
  return _internal_delay();
}
inline void TripUpdate::set_delay(::int32_t value) {
  _internal_set_delay(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripUpdate.delay)
}
inline ::int32_t TripUpdate::_internal_delay() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.delay_;
}
inline void TripUpdate::_internal_set_delay(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.delay_ = value;
}

// -------------------------------------------------------------------

// VehiclePosition

// .transit_realtime.TripDescriptor trip = 1;
inline bool VehiclePosition::has_trip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trip_ != nullptr);
  return value;
}
inline void VehiclePosition::clear_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.trip_ != nullptr) _impl_.trip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::TripDescriptor& VehiclePosition::_internal_trip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TripDescriptor* p = _impl_.trip_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TripDescriptor&>(::transit_realtime::_TripDescriptor_default_instance_);
}
inline const ::transit_realtime::TripDescriptor& VehiclePosition::trip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.trip)
  return _internal_trip();
}
inline void VehiclePosition::unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trip_);
  }
  _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.trip)
}
inline ::transit_realtime::TripDescriptor* VehiclePosition::release_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripDescriptor* released = _impl_.trip_;
  _impl_.trip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TripDescriptor* VehiclePosition::unsafe_arena_release_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.trip)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripDescriptor* temp = _impl_.trip_;
  _impl_.trip_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripDescriptor* VehiclePosition::_internal_mutable_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.trip_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TripDescriptor>(GetArena());
    _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(p);
  }
  return _impl_.trip_;
}
inline ::transit_realtime::TripDescriptor* VehiclePosition::mutable_trip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TripDescriptor* _msg = _internal_mutable_trip();
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.trip)
  return _msg;
}
inline void VehiclePosition::set_allocated_trip(::transit_realtime::TripDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TripDescriptor*>(_impl_.trip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TripDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.trip)
}

// .transit_realtime.VehicleDescriptor vehicle = 8;
inline bool VehiclePosition::has_vehicle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehicle_ != nullptr);
  return value;
}
inline void VehiclePosition::clear_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.vehicle_ != nullptr) _impl_.vehicle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::VehicleDescriptor& VehiclePosition::_internal_vehicle() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::VehicleDescriptor* p = _impl_.vehicle_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::VehicleDescriptor&>(::transit_realtime::_VehicleDescriptor_default_instance_);
}
inline const ::transit_realtime::VehicleDescriptor& VehiclePosition::vehicle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.vehicle)
  return _internal_vehicle();
}
inline void VehiclePosition::unsafe_arena_set_allocated_vehicle(::transit_realtime::VehicleDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.vehicle_);
  }
  _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehicleDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.vehicle)
}
inline ::transit_realtime::VehicleDescriptor* VehiclePosition::release_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::VehicleDescriptor* released = _impl_.vehicle_;
  _impl_.vehicle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::VehicleDescriptor* VehiclePosition::unsafe_arena_release_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.vehicle)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::VehicleDescriptor* temp = _impl_.vehicle_;
  _impl_.vehicle_ = nullptr;
  return temp;
}
inline ::transit_realtime::VehicleDescriptor* VehiclePosition::_internal_mutable_vehicle() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vehicle_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::VehicleDescriptor>(GetArena());
    _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehicleDescriptor*>(p);
  }
  return _impl_.vehicle_;
}
inline ::transit_realtime::VehicleDescriptor* VehiclePosition::mutable_vehicle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::VehicleDescriptor* _msg = _internal_mutable_vehicle();
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.vehicle)
  return _msg;
}
inline void VehiclePosition::set_allocated_vehicle(::transit_realtime::VehicleDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::VehicleDescriptor*>(_impl_.vehicle_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::VehicleDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.vehicle_ = reinterpret_cast<::transit_realtime::VehicleDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.vehicle)
}

// .transit_realtime.Position position = 2;
inline bool VehiclePosition::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void VehiclePosition::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::Position& VehiclePosition::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::Position&>(::transit_realtime::_Position_default_instance_);
}
inline const ::transit_realtime::Position& VehiclePosition::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.position)
  return _internal_position();
}
inline void VehiclePosition::unsafe_arena_set_allocated_position(::transit_realtime::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::transit_realtime::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.VehiclePosition.position)
}
inline ::transit_realtime::Position* VehiclePosition::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::Position* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::Position* VehiclePosition::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.position)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::transit_realtime::Position* VehiclePosition::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::Position>(GetArena());
    _impl_.position_ = reinterpret_cast<::transit_realtime::Position*>(p);
  }
  return _impl_.position_;
}
inline ::transit_realtime::Position* VehiclePosition::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.position)
  return _msg;
}
inline void VehiclePosition::set_allocated_position(::transit_realtime::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::Position*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::Position*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.position_ = reinterpret_cast<::transit_realtime::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.position)
}

// uint32 current_stop_sequence = 3;
inline void VehiclePosition::clear_current_stop_sequence() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.current_stop_sequence_ = 0u;
}
inline ::uint32_t VehiclePosition::current_stop_sequence() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.current_stop_sequence)
  return _internal_current_stop_sequence();
}
inline void VehiclePosition::set_current_stop_sequence(::uint32_t value) {
  _internal_set_current_stop_sequence(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.current_stop_sequence)
}
inline ::uint32_t VehiclePosition::_internal_current_stop_sequence() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.current_stop_sequence_;
}
inline void VehiclePosition::_internal_set_current_stop_sequence(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_stop_sequence_ = value;
}

// string stop_id = 7;
inline void VehiclePosition::clear_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_id_.ClearToEmpty();
}
inline const std::string& VehiclePosition::stop_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.stop_id)
  return _internal_stop_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehiclePosition::set_stop_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stop_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.stop_id)
}
inline std::string* VehiclePosition::mutable_stop_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stop_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehiclePosition.stop_id)
  return _s;
}
inline const std::string& VehiclePosition::_internal_stop_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stop_id_.Get();
}
inline void VehiclePosition::_internal_set_stop_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stop_id_.Set(value, GetArena());
}
inline std::string* VehiclePosition::_internal_mutable_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.stop_id_.Mutable( GetArena());
}
inline std::string* VehiclePosition::release_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.VehiclePosition.stop_id)
  return _impl_.stop_id_.Release();
}
inline void VehiclePosition::set_allocated_stop_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stop_id_.IsDefault()) {
          _impl_.stop_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehiclePosition.stop_id)
}

// .transit_realtime.VehiclePosition.VehicleStopStatus current_status = 4;
inline void VehiclePosition::clear_current_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.current_status_ = 0;
}
inline ::transit_realtime::VehiclePosition_VehicleStopStatus VehiclePosition::current_status() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.current_status)
  return _internal_current_status();
}
inline void VehiclePosition::set_current_status(::transit_realtime::VehiclePosition_VehicleStopStatus value) {
  _internal_set_current_status(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.current_status)
}
inline ::transit_realtime::VehiclePosition_VehicleStopStatus VehiclePosition::_internal_current_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transit_realtime::VehiclePosition_VehicleStopStatus>(_impl_.current_status_);
}
inline void VehiclePosition::_internal_set_current_status(::transit_realtime::VehiclePosition_VehicleStopStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.current_status_ = value;
}

// uint64 timestamp = 5;
inline void VehiclePosition::clear_timestamp() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.timestamp_ = ::uint64_t{0u};
}
inline ::uint64_t VehiclePosition::timestamp() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.timestamp)
  return _internal_timestamp();
}
inline void VehiclePosition::set_timestamp(::uint64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.timestamp)
}
inline ::uint64_t VehiclePosition::_internal_timestamp() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.timestamp_;
}
inline void VehiclePosition::_internal_set_timestamp(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.timestamp_ = value;
}

// .transit_realtime.VehiclePosition.CongestionLevel congestion_level = 6;
inline void VehiclePosition::clear_congestion_level() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.congestion_level_ = 0;
}
inline ::transit_realtime::VehiclePosition_CongestionLevel VehiclePosition::congestion_level() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.congestion_level)
  return _internal_congestion_level();
}
inline void VehiclePosition::set_congestion_level(::transit_realtime::VehiclePosition_CongestionLevel value) {
  _internal_set_congestion_level(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.congestion_level)
}
inline ::transit_realtime::VehiclePosition_CongestionLevel VehiclePosition::_internal_congestion_level() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transit_realtime::VehiclePosition_CongestionLevel>(_impl_.congestion_level_);
}
inline void VehiclePosition::_internal_set_congestion_level(::transit_realtime::VehiclePosition_CongestionLevel value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.congestion_level_ = value;
}

// .transit_realtime.VehiclePosition.OccupancyStatus occupancy_status = 9;
inline void VehiclePosition::clear_occupancy_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.occupancy_status_ = 0;
}
inline ::transit_realtime::VehiclePosition_OccupancyStatus VehiclePosition::occupancy_status() const {
  // @@protoc_insertion_point(field_get:transit_realtime.VehiclePosition.occupancy_status)
  return _internal_occupancy_status();
}
inline void VehiclePosition::set_occupancy_status(::transit_realtime::VehiclePosition_OccupancyStatus value) {
  _internal_set_occupancy_status(value);
  // @@protoc_insertion_point(field_set:transit_realtime.VehiclePosition.occupancy_status)
}
inline ::transit_realtime::VehiclePosition_OccupancyStatus VehiclePosition::_internal_occupancy_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transit_realtime::VehiclePosition_OccupancyStatus>(_impl_.occupancy_status_);
}
inline void VehiclePosition::_internal_set_occupancy_status(::transit_realtime::VehiclePosition_OccupancyStatus value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.occupancy_status_ = value;
}

// -------------------------------------------------------------------

// Alert

// repeated .transit_realtime.TimeRange active_period = 1;
inline int Alert::_internal_active_period_size() const {
  return _internal_active_period().size();
}
inline int Alert::active_period_size() const {
  return _internal_active_period_size();
}
inline void Alert::clear_active_period() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.active_period_.Clear();
}
inline ::transit_realtime::TimeRange* Alert::mutable_active_period(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.active_period)
  return _internal_mutable_active_period()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::TimeRange>* Alert::mutable_active_period()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.Alert.active_period)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_active_period();
}
inline const ::transit_realtime::TimeRange& Alert::active_period(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.active_period)
  return _internal_active_period().Get(index);
}
inline ::transit_realtime::TimeRange* Alert::add_active_period() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::transit_realtime::TimeRange* _add = _internal_mutable_active_period()->Add();
  // @@protoc_insertion_point(field_add:transit_realtime.Alert.active_period)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::TimeRange>& Alert::active_period() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:transit_realtime.Alert.active_period)
  return _internal_active_period();
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::TimeRange>&
Alert::_internal_active_period() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.active_period_;
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::TimeRange>*
Alert::_internal_mutable_active_period() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.active_period_;
}

// repeated .transit_realtime.EntitySelector informed_entity = 5;
inline int Alert::_internal_informed_entity_size() const {
  return _internal_informed_entity().size();
}
inline int Alert::informed_entity_size() const {
  return _internal_informed_entity_size();
}
inline void Alert::clear_informed_entity() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.informed_entity_.Clear();
}
inline ::transit_realtime::EntitySelector* Alert::mutable_informed_entity(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.informed_entity)
  return _internal_mutable_informed_entity()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::EntitySelector>* Alert::mutable_informed_entity()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.Alert.informed_entity)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_informed_entity();
}
inline const ::transit_realtime::EntitySelector& Alert::informed_entity(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.informed_entity)
  return _internal_informed_entity().Get(index);
}
inline ::transit_realtime::EntitySelector* Alert::add_informed_entity() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::transit_realtime::EntitySelector* _add = _internal_mutable_informed_entity()->Add();
  // @@protoc_insertion_point(field_add:transit_realtime.Alert.informed_entity)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::EntitySelector>& Alert::informed_entity() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:transit_realtime.Alert.informed_entity)
  return _internal_informed_entity();
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::EntitySelector>&
Alert::_internal_informed_entity() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.informed_entity_;
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::EntitySelector>*
Alert::_internal_mutable_informed_entity() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.informed_entity_;
}

// .transit_realtime.Alert.Cause cause = 6;
inline void Alert::clear_cause() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.cause_ = 0;
}
inline ::transit_realtime::Alert_Cause Alert::cause() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.cause)
  return _internal_cause();
}
inline void Alert::set_cause(::transit_realtime::Alert_Cause value) {
  _internal_set_cause(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Alert.cause)
}
inline ::transit_realtime::Alert_Cause Alert::_internal_cause() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transit_realtime::Alert_Cause>(_impl_.cause_);
}
inline void Alert::_internal_set_cause(::transit_realtime::Alert_Cause value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.cause_ = value;
}

// .transit_realtime.Alert.Effect effect = 7;
inline void Alert::clear_effect() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.effect_ = 0;
}
inline ::transit_realtime::Alert_Effect Alert::effect() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.effect)
  return _internal_effect();
}
inline void Alert::set_effect(::transit_realtime::Alert_Effect value) {
  _internal_set_effect(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Alert.effect)
}
inline ::transit_realtime::Alert_Effect Alert::_internal_effect() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transit_realtime::Alert_Effect>(_impl_.effect_);
}
inline void Alert::_internal_set_effect(::transit_realtime::Alert_Effect value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.effect_ = value;
}

// .transit_realtime.TranslatedString url = 8;
inline bool Alert::has_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.url_ != nullptr);
  return value;
}
inline void Alert::clear_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.url_ != nullptr) _impl_.url_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::TranslatedString& Alert::_internal_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TranslatedString* p = _impl_.url_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TranslatedString&>(::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString& Alert::url() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.url)
  return _internal_url();
}
inline void Alert::unsafe_arena_set_allocated_url(::transit_realtime::TranslatedString* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.url_);
  }
  _impl_.url_ = reinterpret_cast<::transit_realtime::TranslatedString*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.url)
}
inline ::transit_realtime::TranslatedString* Alert::release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TranslatedString* released = _impl_.url_;
  _impl_.url_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TranslatedString* Alert::unsafe_arena_release_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.url)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TranslatedString* temp = _impl_.url_;
  _impl_.url_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString* Alert::_internal_mutable_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.url_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    _impl_.url_ = reinterpret_cast<::transit_realtime::TranslatedString*>(p);
  }
  return _impl_.url_;
}
inline ::transit_realtime::TranslatedString* Alert::mutable_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TranslatedString* _msg = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.url)
  return _msg;
}
inline void Alert::set_allocated_url(::transit_realtime::TranslatedString* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TranslatedString*>(_impl_.url_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TranslatedString*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.url_ = reinterpret_cast<::transit_realtime::TranslatedString*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.url)
}

// .transit_realtime.TranslatedString header_text = 10;
inline bool Alert::has_header_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_text_ != nullptr);
  return value;
}
inline void Alert::clear_header_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.header_text_ != nullptr) _impl_.header_text_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::transit_realtime::TranslatedString& Alert::_internal_header_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TranslatedString* p = _impl_.header_text_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TranslatedString&>(::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString& Alert::header_text() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.header_text)
  return _internal_header_text();
}
inline void Alert::unsafe_arena_set_allocated_header_text(::transit_realtime::TranslatedString* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.header_text_);
  }
  _impl_.header_text_ = reinterpret_cast<::transit_realtime::TranslatedString*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.header_text)
}
inline ::transit_realtime::TranslatedString* Alert::release_header_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TranslatedString* released = _impl_.header_text_;
  _impl_.header_text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TranslatedString* Alert::unsafe_arena_release_header_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.header_text)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::transit_realtime::TranslatedString* temp = _impl_.header_text_;
  _impl_.header_text_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString* Alert::_internal_mutable_header_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    _impl_.header_text_ = reinterpret_cast<::transit_realtime::TranslatedString*>(p);
  }
  return _impl_.header_text_;
}
inline ::transit_realtime::TranslatedString* Alert::mutable_header_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TranslatedString* _msg = _internal_mutable_header_text();
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.header_text)
  return _msg;
}
inline void Alert::set_allocated_header_text(::transit_realtime::TranslatedString* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TranslatedString*>(_impl_.header_text_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TranslatedString*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.header_text_ = reinterpret_cast<::transit_realtime::TranslatedString*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.header_text)
}

// .transit_realtime.TranslatedString description_text = 11;
inline bool Alert::has_description_text() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.description_text_ != nullptr);
  return value;
}
inline void Alert::clear_description_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.description_text_ != nullptr) _impl_.description_text_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::transit_realtime::TranslatedString& Alert::_internal_description_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TranslatedString* p = _impl_.description_text_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TranslatedString&>(::transit_realtime::_TranslatedString_default_instance_);
}
inline const ::transit_realtime::TranslatedString& Alert::description_text() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.Alert.description_text)
  return _internal_description_text();
}
inline void Alert::unsafe_arena_set_allocated_description_text(::transit_realtime::TranslatedString* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.description_text_);
  }
  _impl_.description_text_ = reinterpret_cast<::transit_realtime::TranslatedString*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.Alert.description_text)
}
inline ::transit_realtime::TranslatedString* Alert::release_description_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::TranslatedString* released = _impl_.description_text_;
  _impl_.description_text_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TranslatedString* Alert::unsafe_arena_release_description_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.Alert.description_text)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::transit_realtime::TranslatedString* temp = _impl_.description_text_;
  _impl_.description_text_ = nullptr;
  return temp;
}
inline ::transit_realtime::TranslatedString* Alert::_internal_mutable_description_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.description_text_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TranslatedString>(GetArena());
    _impl_.description_text_ = reinterpret_cast<::transit_realtime::TranslatedString*>(p);
  }
  return _impl_.description_text_;
}
inline ::transit_realtime::TranslatedString* Alert::mutable_description_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TranslatedString* _msg = _internal_mutable_description_text();
  // @@protoc_insertion_point(field_mutable:transit_realtime.Alert.description_text)
  return _msg;
}
inline void Alert::set_allocated_description_text(::transit_realtime::TranslatedString* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TranslatedString*>(_impl_.description_text_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TranslatedString*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.description_text_ = reinterpret_cast<::transit_realtime::TranslatedString*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.Alert.description_text)
}

// -------------------------------------------------------------------

// TimeRange

// uint64 start = 1;
inline void TimeRange::clear_start() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_ = ::uint64_t{0u};
}
inline ::uint64_t TimeRange::start() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TimeRange.start)
  return _internal_start();
}
inline void TimeRange::set_start(::uint64_t value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TimeRange.start)
}
inline ::uint64_t TimeRange::_internal_start() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_;
}
inline void TimeRange::_internal_set_start(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_ = value;
}

// uint64 end = 2;
inline void TimeRange::clear_end() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_ = ::uint64_t{0u};
}
inline ::uint64_t TimeRange::end() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TimeRange.end)
  return _internal_end();
}
inline void TimeRange::set_end(::uint64_t value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TimeRange.end)
}
inline ::uint64_t TimeRange::_internal_end() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_;
}
inline void TimeRange::_internal_set_end(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.end_ = value;
}

// -------------------------------------------------------------------

// Position

// float latitude = 1;
inline void Position::clear_latitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.latitude_ = 0;
}
inline float Position::latitude() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.latitude)
  return _internal_latitude();
}
inline void Position::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.latitude)
}
inline float Position::_internal_latitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.latitude_;
}
inline void Position::_internal_set_latitude(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.latitude_ = value;
}

// float longitude = 2;
inline void Position::clear_longitude() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.longitude_ = 0;
}
inline float Position::longitude() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.longitude)
  return _internal_longitude();
}
inline void Position::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.longitude)
}
inline float Position::_internal_longitude() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.longitude_;
}
inline void Position::_internal_set_longitude(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.longitude_ = value;
}

// float bearing = 3;
inline void Position::clear_bearing() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.bearing_ = 0;
}
inline float Position::bearing() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.bearing)
  return _internal_bearing();
}
inline void Position::set_bearing(float value) {
  _internal_set_bearing(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.bearing)
}
inline float Position::_internal_bearing() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.bearing_;
}
inline void Position::_internal_set_bearing(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.bearing_ = value;
}

// double odometer = 4;
inline void Position::clear_odometer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.odometer_ = 0;
}
inline double Position::odometer() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.odometer)
  return _internal_odometer();
}
inline void Position::set_odometer(double value) {
  _internal_set_odometer(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.odometer)
}
inline double Position::_internal_odometer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.odometer_;
}
inline void Position::_internal_set_odometer(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.odometer_ = value;
}

// float speed = 5;
inline void Position::clear_speed() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.speed_ = 0;
}
inline float Position::speed() const {
  // @@protoc_insertion_point(field_get:transit_realtime.Position.speed)
  return _internal_speed();
}
inline void Position::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:transit_realtime.Position.speed)
}
inline float Position::_internal_speed() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.speed_;
}
inline void Position::_internal_set_speed(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.speed_ = value;
}

// -------------------------------------------------------------------

// TripDescriptor

// string trip_id = 1;
inline void TripDescriptor::clear_trip_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trip_id_.ClearToEmpty();
}
inline const std::string& TripDescriptor::trip_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.trip_id)
  return _internal_trip_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TripDescriptor::set_trip_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trip_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.trip_id)
}
inline std::string* TripDescriptor::mutable_trip_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_trip_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.trip_id)
  return _s;
}
inline const std::string& TripDescriptor::_internal_trip_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.trip_id_.Get();
}
inline void TripDescriptor::_internal_set_trip_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.trip_id_.Set(value, GetArena());
}
inline std::string* TripDescriptor::_internal_mutable_trip_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.trip_id_.Mutable( GetArena());
}
inline std::string* TripDescriptor::release_trip_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.trip_id)
  return _impl_.trip_id_.Release();
}
inline void TripDescriptor::set_allocated_trip_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.trip_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.trip_id_.IsDefault()) {
          _impl_.trip_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.trip_id)
}

// string route_id = 5;
inline void TripDescriptor::clear_route_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.route_id_.ClearToEmpty();
}
inline const std::string& TripDescriptor::route_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.route_id)
  return _internal_route_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TripDescriptor::set_route_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.route_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.route_id)
}
inline std::string* TripDescriptor::mutable_route_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_route_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.route_id)
  return _s;
}
inline const std::string& TripDescriptor::_internal_route_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.route_id_.Get();
}
inline void TripDescriptor::_internal_set_route_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.route_id_.Set(value, GetArena());
}
inline std::string* TripDescriptor::_internal_mutable_route_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.route_id_.Mutable( GetArena());
}
inline std::string* TripDescriptor::release_route_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.route_id)
  return _impl_.route_id_.Release();
}
inline void TripDescriptor::set_allocated_route_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.route_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.route_id_.IsDefault()) {
          _impl_.route_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.route_id)
}

// uint32 direction_id = 6;
inline void TripDescriptor::clear_direction_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.direction_id_ = 0u;
}
inline ::uint32_t TripDescriptor::direction_id() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.direction_id)
  return _internal_direction_id();
}
inline void TripDescriptor::set_direction_id(::uint32_t value) {
  _internal_set_direction_id(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.direction_id)
}
inline ::uint32_t TripDescriptor::_internal_direction_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.direction_id_;
}
inline void TripDescriptor::_internal_set_direction_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.direction_id_ = value;
}

// string start_time = 2;
inline void TripDescriptor::clear_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_.ClearToEmpty();
}
inline const std::string& TripDescriptor::start_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.start_time)
  return _internal_start_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TripDescriptor::set_start_time(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.start_time)
}
inline std::string* TripDescriptor::mutable_start_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_start_time();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.start_time)
  return _s;
}
inline const std::string& TripDescriptor::_internal_start_time() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_time_.Get();
}
inline void TripDescriptor::_internal_set_start_time(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_time_.Set(value, GetArena());
}
inline std::string* TripDescriptor::_internal_mutable_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.start_time_.Mutable( GetArena());
}
inline std::string* TripDescriptor::release_start_time() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.start_time)
  return _impl_.start_time_.Release();
}
inline void TripDescriptor::set_allocated_start_time(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_time_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.start_time_.IsDefault()) {
          _impl_.start_time_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.start_time)
}

// string start_date = 3;
inline void TripDescriptor::clear_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_date_.ClearToEmpty();
}
inline const std::string& TripDescriptor::start_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.start_date)
  return _internal_start_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TripDescriptor::set_start_date(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.start_date)
}
inline std::string* TripDescriptor::mutable_start_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_start_date();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TripDescriptor.start_date)
  return _s;
}
inline const std::string& TripDescriptor::_internal_start_date() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_date_.Get();
}
inline void TripDescriptor::_internal_set_start_date(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.start_date_.Set(value, GetArena());
}
inline std::string* TripDescriptor::_internal_mutable_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.start_date_.Mutable( GetArena());
}
inline std::string* TripDescriptor::release_start_date() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TripDescriptor.start_date)
  return _impl_.start_date_.Release();
}
inline void TripDescriptor::set_allocated_start_date(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_date_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.start_date_.IsDefault()) {
          _impl_.start_date_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TripDescriptor.start_date)
}

// .transit_realtime.TripDescriptor.ScheduleRelationship schedule_relationship = 4;
inline void TripDescriptor::clear_schedule_relationship() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.schedule_relationship_ = 0;
}
inline ::transit_realtime::TripDescriptor_ScheduleRelationship TripDescriptor::schedule_relationship() const {
  // @@protoc_insertion_point(field_get:transit_realtime.TripDescriptor.schedule_relationship)
  return _internal_schedule_relationship();
}
inline void TripDescriptor::set_schedule_relationship(::transit_realtime::TripDescriptor_ScheduleRelationship value) {
  _internal_set_schedule_relationship(value);
  // @@protoc_insertion_point(field_set:transit_realtime.TripDescriptor.schedule_relationship)
}
inline ::transit_realtime::TripDescriptor_ScheduleRelationship TripDescriptor::_internal_schedule_relationship() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::transit_realtime::TripDescriptor_ScheduleRelationship>(_impl_.schedule_relationship_);
}
inline void TripDescriptor::_internal_set_schedule_relationship(::transit_realtime::TripDescriptor_ScheduleRelationship value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.schedule_relationship_ = value;
}

// -------------------------------------------------------------------

// VehicleDescriptor

// string id = 1;
inline void VehicleDescriptor::clear_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.ClearToEmpty();
}
inline const std::string& VehicleDescriptor::id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.id)
  return _internal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleDescriptor::set_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.id)
}
inline std::string* VehicleDescriptor::mutable_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.id)
  return _s;
}
inline const std::string& VehicleDescriptor::_internal_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.id_.Get();
}
inline void VehicleDescriptor::_internal_set_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.id_.Set(value, GetArena());
}
inline std::string* VehicleDescriptor::_internal_mutable_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.id_.Mutable( GetArena());
}
inline std::string* VehicleDescriptor::release_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.id)
  return _impl_.id_.Release();
}
inline void VehicleDescriptor::set_allocated_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.id_.IsDefault()) {
          _impl_.id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.id)
}

// string label = 2;
inline void VehicleDescriptor::clear_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.ClearToEmpty();
}
inline const std::string& VehicleDescriptor::label() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.label)
  return _internal_label();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleDescriptor::set_label(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.label)
}
inline std::string* VehicleDescriptor::mutable_label() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.label)
  return _s;
}
inline const std::string& VehicleDescriptor::_internal_label() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.label_.Get();
}
inline void VehicleDescriptor::_internal_set_label(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.label_.Set(value, GetArena());
}
inline std::string* VehicleDescriptor::_internal_mutable_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.label_.Mutable( GetArena());
}
inline std::string* VehicleDescriptor::release_label() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.label)
  return _impl_.label_.Release();
}
inline void VehicleDescriptor::set_allocated_label(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.label_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.label_.IsDefault()) {
          _impl_.label_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.label)
}

// string license_plate = 3;
inline void VehicleDescriptor::clear_license_plate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.license_plate_.ClearToEmpty();
}
inline const std::string& VehicleDescriptor::license_plate() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.VehicleDescriptor.license_plate)
  return _internal_license_plate();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VehicleDescriptor::set_license_plate(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.license_plate_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.VehicleDescriptor.license_plate)
}
inline std::string* VehicleDescriptor::mutable_license_plate() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_license_plate();
  // @@protoc_insertion_point(field_mutable:transit_realtime.VehicleDescriptor.license_plate)
  return _s;
}
inline const std::string& VehicleDescriptor::_internal_license_plate() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.license_plate_.Get();
}
inline void VehicleDescriptor::_internal_set_license_plate(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.license_plate_.Set(value, GetArena());
}
inline std::string* VehicleDescriptor::_internal_mutable_license_plate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.license_plate_.Mutable( GetArena());
}
inline std::string* VehicleDescriptor::release_license_plate() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.VehicleDescriptor.license_plate)
  return _impl_.license_plate_.Release();
}
inline void VehicleDescriptor::set_allocated_license_plate(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.license_plate_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.license_plate_.IsDefault()) {
          _impl_.license_plate_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.VehicleDescriptor.license_plate)
}

// -------------------------------------------------------------------

// EntitySelector

// string agency_id = 1;
inline void EntitySelector::clear_agency_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agency_id_.ClearToEmpty();
}
inline const std::string& EntitySelector::agency_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.agency_id)
  return _internal_agency_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EntitySelector::set_agency_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.agency_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.agency_id)
}
inline std::string* EntitySelector::mutable_agency_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_agency_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.agency_id)
  return _s;
}
inline const std::string& EntitySelector::_internal_agency_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.agency_id_.Get();
}
inline void EntitySelector::_internal_set_agency_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.agency_id_.Set(value, GetArena());
}
inline std::string* EntitySelector::_internal_mutable_agency_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.agency_id_.Mutable( GetArena());
}
inline std::string* EntitySelector::release_agency_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.agency_id)
  return _impl_.agency_id_.Release();
}
inline void EntitySelector::set_allocated_agency_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.agency_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.agency_id_.IsDefault()) {
          _impl_.agency_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.agency_id)
}

// string route_id = 2;
inline void EntitySelector::clear_route_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.route_id_.ClearToEmpty();
}
inline const std::string& EntitySelector::route_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.route_id)
  return _internal_route_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EntitySelector::set_route_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.route_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.route_id)
}
inline std::string* EntitySelector::mutable_route_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_route_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.route_id)
  return _s;
}
inline const std::string& EntitySelector::_internal_route_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.route_id_.Get();
}
inline void EntitySelector::_internal_set_route_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.route_id_.Set(value, GetArena());
}
inline std::string* EntitySelector::_internal_mutable_route_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.route_id_.Mutable( GetArena());
}
inline std::string* EntitySelector::release_route_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.route_id)
  return _impl_.route_id_.Release();
}
inline void EntitySelector::set_allocated_route_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.route_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.route_id_.IsDefault()) {
          _impl_.route_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.route_id)
}

// int32 route_type = 3;
inline void EntitySelector::clear_route_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.route_type_ = 0;
}
inline ::int32_t EntitySelector::route_type() const {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.route_type)
  return _internal_route_type();
}
inline void EntitySelector::set_route_type(::int32_t value) {
  _internal_set_route_type(value);
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.route_type)
}
inline ::int32_t EntitySelector::_internal_route_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.route_type_;
}
inline void EntitySelector::_internal_set_route_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.route_type_ = value;
}

// .transit_realtime.TripDescriptor trip = 4;
inline bool EntitySelector::has_trip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.trip_ != nullptr);
  return value;
}
inline void EntitySelector::clear_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.trip_ != nullptr) _impl_.trip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::transit_realtime::TripDescriptor& EntitySelector::_internal_trip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::transit_realtime::TripDescriptor* p = _impl_.trip_;
  return p != nullptr ? *p : reinterpret_cast<const ::transit_realtime::TripDescriptor&>(::transit_realtime::_TripDescriptor_default_instance_);
}
inline const ::transit_realtime::TripDescriptor& EntitySelector::trip() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.trip)
  return _internal_trip();
}
inline void EntitySelector::unsafe_arena_set_allocated_trip(::transit_realtime::TripDescriptor* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.trip_);
  }
  _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:transit_realtime.EntitySelector.trip)
}
inline ::transit_realtime::TripDescriptor* EntitySelector::release_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripDescriptor* released = _impl_.trip_;
  _impl_.trip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::transit_realtime::TripDescriptor* EntitySelector::unsafe_arena_release_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.trip)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::transit_realtime::TripDescriptor* temp = _impl_.trip_;
  _impl_.trip_ = nullptr;
  return temp;
}
inline ::transit_realtime::TripDescriptor* EntitySelector::_internal_mutable_trip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.trip_ == nullptr) {
    auto* p = CreateMaybeMessage<::transit_realtime::TripDescriptor>(GetArena());
    _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(p);
  }
  return _impl_.trip_;
}
inline ::transit_realtime::TripDescriptor* EntitySelector::mutable_trip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::transit_realtime::TripDescriptor* _msg = _internal_mutable_trip();
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.trip)
  return _msg;
}
inline void EntitySelector::set_allocated_trip(::transit_realtime::TripDescriptor* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::transit_realtime::TripDescriptor*>(_impl_.trip_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::transit_realtime::TripDescriptor*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.trip_ = reinterpret_cast<::transit_realtime::TripDescriptor*>(value);
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.trip)
}

// string stop_id = 5;
inline void EntitySelector::clear_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_id_.ClearToEmpty();
}
inline const std::string& EntitySelector::stop_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.EntitySelector.stop_id)
  return _internal_stop_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EntitySelector::set_stop_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stop_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.EntitySelector.stop_id)
}
inline std::string* EntitySelector::mutable_stop_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stop_id();
  // @@protoc_insertion_point(field_mutable:transit_realtime.EntitySelector.stop_id)
  return _s;
}
inline const std::string& EntitySelector::_internal_stop_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.stop_id_.Get();
}
inline void EntitySelector::_internal_set_stop_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.stop_id_.Set(value, GetArena());
}
inline std::string* EntitySelector::_internal_mutable_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.stop_id_.Mutable( GetArena());
}
inline std::string* EntitySelector::release_stop_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.EntitySelector.stop_id)
  return _impl_.stop_id_.Release();
}
inline void EntitySelector::set_allocated_stop_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.stop_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.stop_id_.IsDefault()) {
          _impl_.stop_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.EntitySelector.stop_id)
}

// -------------------------------------------------------------------

// TranslatedString_Translation

// string text = 1;
inline void TranslatedString_Translation::clear_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.ClearToEmpty();
}
inline const std::string& TranslatedString_Translation::text() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.Translation.text)
  return _internal_text();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TranslatedString_Translation::set_text(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedString.Translation.text)
}
inline std::string* TranslatedString_Translation::mutable_text() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.Translation.text)
  return _s;
}
inline const std::string& TranslatedString_Translation::_internal_text() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.text_.Get();
}
inline void TranslatedString_Translation::_internal_set_text(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.text_.Set(value, GetArena());
}
inline std::string* TranslatedString_Translation::_internal_mutable_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.text_.Mutable( GetArena());
}
inline std::string* TranslatedString_Translation::release_text() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedString.Translation.text)
  return _impl_.text_.Release();
}
inline void TranslatedString_Translation::set_allocated_text(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.text_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.text_.IsDefault()) {
          _impl_.text_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedString.Translation.text)
}

// string language = 2;
inline void TranslatedString_Translation::clear_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_.ClearToEmpty();
}
inline const std::string& TranslatedString_Translation::language() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.Translation.language)
  return _internal_language();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TranslatedString_Translation::set_language(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:transit_realtime.TranslatedString.Translation.language)
}
inline std::string* TranslatedString_Translation::mutable_language() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_language();
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.Translation.language)
  return _s;
}
inline const std::string& TranslatedString_Translation::_internal_language() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.language_.Get();
}
inline void TranslatedString_Translation::_internal_set_language(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.language_.Set(value, GetArena());
}
inline std::string* TranslatedString_Translation::_internal_mutable_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.language_.Mutable( GetArena());
}
inline std::string* TranslatedString_Translation::release_language() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:transit_realtime.TranslatedString.Translation.language)
  return _impl_.language_.Release();
}
inline void TranslatedString_Translation::set_allocated_language(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.language_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.language_.IsDefault()) {
          _impl_.language_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:transit_realtime.TranslatedString.Translation.language)
}

// -------------------------------------------------------------------

// TranslatedString

// repeated .transit_realtime.TranslatedString.Translation translation = 1;
inline int TranslatedString::_internal_translation_size() const {
  return _internal_translation().size();
}
inline int TranslatedString::translation_size() const {
  return _internal_translation_size();
}
inline void TranslatedString::clear_translation() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.translation_.Clear();
}
inline ::transit_realtime::TranslatedString_Translation* TranslatedString::mutable_translation(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:transit_realtime.TranslatedString.translation)
  return _internal_mutable_translation()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::TranslatedString_Translation>* TranslatedString::mutable_translation()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:transit_realtime.TranslatedString.translation)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_translation();
}
inline const ::transit_realtime::TranslatedString_Translation& TranslatedString::translation(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:transit_realtime.TranslatedString.translation)
  return _internal_translation().Get(index);
}
inline ::transit_realtime::TranslatedString_Translation* TranslatedString::add_translation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::transit_realtime::TranslatedString_Translation* _add = _internal_mutable_translation()->Add();
  // @@protoc_insertion_point(field_add:transit_realtime.TranslatedString.translation)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::TranslatedString_Translation>& TranslatedString::translation() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:transit_realtime.TranslatedString.translation)
  return _internal_translation();
}
inline const ::google::protobuf::RepeatedPtrField<::transit_realtime::TranslatedString_Translation>&
TranslatedString::_internal_translation() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.translation_;
}
inline ::google::protobuf::RepeatedPtrField<::transit_realtime::TranslatedString_Translation>*
TranslatedString::_internal_mutable_translation() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.translation_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace transit_realtime


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::transit_realtime::FeedHeader_Incrementality> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transit_realtime::FeedHeader_Incrementality>() {
  return ::transit_realtime::FeedHeader_Incrementality_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship>() {
  return ::transit_realtime::TripUpdate_StopTimeUpdate_ScheduleRelationship_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::VehiclePosition_VehicleStopStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transit_realtime::VehiclePosition_VehicleStopStatus>() {
  return ::transit_realtime::VehiclePosition_VehicleStopStatus_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::VehiclePosition_CongestionLevel> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transit_realtime::VehiclePosition_CongestionLevel>() {
  return ::transit_realtime::VehiclePosition_CongestionLevel_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::VehiclePosition_OccupancyStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transit_realtime::VehiclePosition_OccupancyStatus>() {
  return ::transit_realtime::VehiclePosition_OccupancyStatus_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::Alert_Cause> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transit_realtime::Alert_Cause>() {
  return ::transit_realtime::Alert_Cause_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::Alert_Effect> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transit_realtime::Alert_Effect>() {
  return ::transit_realtime::Alert_Effect_descriptor();
}
template <>
struct is_proto_enum<::transit_realtime::TripDescriptor_ScheduleRelationship> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::transit_realtime::TripDescriptor_ScheduleRelationship>() {
  return ::transit_realtime::TripDescriptor_ScheduleRelationship_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_gtfs_2drealtime_2eproto_2epb_2eh
